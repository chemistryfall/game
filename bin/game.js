// Generated by Haxe 3.3.0
(function ($hx_exports, $global) { "use strict";
$hx_exports["util"] = $hx_exports["util"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Config = function() {
};
Config.__name__ = true;
Config.prototype = {
	__class__: Config
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Main = $hx_exports["Game"] = function() {
	this.tickListeners = [];
	console.log("new game");
	createjs.Ticker = null;
	util_LoaderWrapper.LOAD_ASSETS(Config.ASSETS,$bind(this,this.onAssetsLoaded));
	sounds_Sounds.initSounds();
};
Main.__name__ = true;
Main.main = function() {
	console.log("Main");
	$().ready(function() {
		Main.instance = new Main();
	});
};
Main.prototype = {
	onAssetsLoaded: function() {
		this.initializeRenderer();
		this.initializeControls();
		window.addEventListener("resize",$bind(this,this.onResize),false);
		window.addEventListener("orientationchange",$bind(this,this.onResize),false);
	}
	,onResize: function(event) {
		var _gthis = this;
		if(this.resizeTimer != null) {
			this.resizeTimer.stop();
		}
		this.resizeTimer = haxe_Timer.delay(function() {
			var size = _gthis.getGameSize();
			_gthis.viewport.scale.x = _gthis.viewport.scale.y = Math.min(size.width / 550,size.height / 550);
			_gthis.bg.resize(size);
			_gthis.game.resize(size);
			_gthis.renderer.resize(size.width,size.height);
			_gthis.viewport.x = size.width / 2;
			_gthis.viewport.y = size.height / 2;
			_gthis.start.resize(size);
			_gthis.ui.resize(size);
			_gthis.mainContainer.visible = true;
		},50);
	}
	,getGameSize: function() {
		return new PIXI.Rectangle(0,0,window.innerWidth,window.innerHeight);
	}
	,initializeRenderer: function() {
		var size = this.getGameSize();
		var options = { };
		options.autoResize = false;
		options.antialias = true;
		options.backgroundColor = 0;
		options.clearBeforeRender = true;
		options.preserveDrawingBuffer = false;
		options.roundPixels = false;
		this.renderer = PIXI.autoDetectRenderer(size.width,size.height,options);
		window.document.getElementById("game").appendChild(this.renderer.view);
	}
	,initializeControls: function() {
		this.engine = Matter.Engine.create();
		this.world = this.engine.world;
		this.world.gravity.y = 0.4;
		this.mainContainer = new PIXI.Container();
		this.bg = new controls_Background();
		this.game = new controls_GameView();
		this.start = new controls_StartView();
		this.ui = new controls_UI();
		this.game.ui = this.ui;
		particles_ParticleManager.init();
		this.bg.addChild(particles_ParticleManager.stars);
		this.viewport = new PIXI.Container();
		this.viewport.addChild(this.bg);
		this.viewport.addChild(this.game);
		this.mainContainer.addChild(this.viewport);
		this.mainContainer.addChild(this.ui);
		this.ui.addChild(this.start);
		this.viewport.pivot.x = 1024;
		this.viewport.pivot.y = 1024;
		this.game.x = 1024;
		this.game.y = 1024;
		this.mainContainer.visible = false;
		this.onResize(null);
		this.ticker = new PIXI.ticker.Ticker();
		this.ticker.start();
		this.ticker.add($bind(this,this.onTickerTick));
		controls_DeviceOrientationControl.initialize();
		this.start.start.addListener("click",$bind(this,this.onStartClick));
		this.start.start.addListener("tap",$bind(this,this.onStartClick));
	}
	,onStartClick: function() {
		var _gthis = this;
		sounds_Sounds.playEffect(sounds_Sounds.TOGGLE);
		this.start.interactiveChildren = false;
		this.start.hide();
		particles_ParticleManager.words.hide();
		haxe_Timer.delay(function() {
			_gthis.game.start();
			_gthis.ui.start(controls_GameView.CONF.instruction,controls_GameView.CONF["final"]);
		},500);
	}
	,replay: function() {
		this.game.hide();
		this.ui.backToSelect();
		this.start.interactiveChildren = true;
		this.start.show();
	}
	,onTickerTick: function() {
		Matter.Engine.update(this.engine,16.666666666666668);
		var delta = this.ticker.deltaTime;
		createjs.Tween.tick(this.ticker.elapsedMS,false);
		var _g = 0;
		var _g1 = this.tickListeners;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			t(delta);
		}
		this.renderer.render(this.mainContainer);
	}
	,updateRotation: function(rotWorld,angleChar) {
		this.viewport.rotation = rotWorld;
		this.game.applyCharMove(rotWorld);
	}
	,__class__: Main
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var controls_AnimationController = function(textures,animations,name) {
	this._queu = [];
	this.sheet = null;
	this._delay = 0;
	this.instantDelay = 0;
	this.frameDelay = 0;
	this.frameListeners = [];
	this._currentTime = 0;
	this.targetLoop = 0;
	this.frameCount = 0;
	this.playing = false;
	this.animationSpeed = 1;
	this.loop = false;
	PIXI.Sprite.call(this,textures == null || textures.length == 0?null:textures[0][0]);
	this._textureMap = new haxe_ds_StringMap();
	var _g1 = 0;
	var _g = animations.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(textures == null || textures[i] == null || textures[i].length == 0) {
			continue;
		}
		var _this = this._textureMap;
		var key = animations[i];
		var value = textures[i];
		if(__map_reserved[key] != null) {
			_this.setReserved(key,value);
		} else {
			_this.h[key] = value;
		}
	}
	this.currentAnimation = animations[0];
	this.currentFrame = 0;
	this.animationSpeed = 0.5;
	this.updateTextures();
};
controls_AnimationController.__name__ = true;
controls_AnimationController.__super__ = PIXI.Sprite;
controls_AnimationController.prototype = $extend(PIXI.Sprite.prototype,{
	changeAnimations: function(textures,animations) {
		this.frameDelay = 0;
		this.frameListeners = [];
		this._textureMap = new haxe_ds_StringMap();
		var _g1 = 0;
		var _g = animations.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(textures == null || textures[i] == null || textures[i].length == 0) {
				continue;
			}
			var _this = this._textureMap;
			var key = animations[i];
			var value = textures[i];
			if(__map_reserved[key] != null) {
				_this.setReserved(key,value);
			} else {
				_this.h[key] = value;
			}
		}
		this.currentAnimation = animations[0];
		this.currentFrame = 0;
		this.updateTextures(true);
	}
	,stop: function() {
		if(!this.playing) {
			return;
		}
		this.playing = false;
		HxOverrides.remove(Main.instance.tickListeners,$bind(this,this.update));
	}
	,play: function() {
		if(this.playing) {
			return;
		}
		this.playing = true;
		Main.instance.tickListeners.push($bind(this,this.update));
	}
	,playAll: function() {
		this.loop = false;
		this._queu = [];
		var tmp = this._textureMap.keys();
		while(tmp.hasNext()) this._queu.push(tmp.next());
		if(this._queu.length > 0) {
			this.gotoAndPlay(this._queu[0]);
		}
	}
	,nextQueu: function() {
		if(this._queu.length > 0) {
			this.gotoAndPlay(this._queu[0]);
		}
	}
	,gotoAndStop: function(animation,frame) {
		this.frameListeners = [];
		this.loopCount = 0;
		this.frameDelay = 0;
		this.stop();
		if(frame == null) {
			frame = 0;
		}
		this._currentTime = frame;
		if(frame != this.currentFrame || (animation != this.currentAnimation || animation == null)) {
			this.currentFrame = frame;
			if(animation != null) {
				this.currentAnimation = animation;
			}
			this.updateTextures();
		}
	}
	,gotoAndPlay: function(animation,frame,frameDelay) {
		HxOverrides.remove(Main.instance.tickListeners,$bind(this,this.frameDelayHandler));
		if(frameDelay != null && frameDelay > 0) {
			this._delay = 0;
			this.frameDelay = frameDelay;
			this.queuAnimation = animation;
			this.queuFrame = frame;
			this.playing = true;
			Main.instance.tickListeners.push($bind(this,this.frameDelayHandler));
		} else {
			this.stop();
			this.frameListeners = [];
			this.loopCount = 0;
			this.queuAnimation = null;
			this.queuFrame = null;
			this.frameDelay = 0;
			this._delay = 0;
			if(frame == null) {
				frame = 0;
			}
			this._currentTime = frame;
			if(frame != this.currentFrame || animation != this.currentAnimation) {
				this.currentFrame = frame;
				this.currentAnimation = animation;
				this.updateTextures();
			}
			this.play();
		}
	}
	,frameDelayHandler: function(delta) {
		var elapsed = this.animationSpeed * delta;
		if(this.frameDelay > 0) {
			this._delay += elapsed;
			if(this._delay >= this.frameDelay) {
				var curListeners = this.frameListeners;
				this.stop();
				this.gotoAndPlay(this.queuAnimation,this.queuFrame);
				this.frameListeners = curListeners;
				return;
			}
		}
	}
	,update: function(delta) {
		if(this._textures == null) {
			return;
		}
		this._currentTime += this.animationSpeed * delta;
		var targetFrame = Math.floor(this._currentTime);
		if(targetFrame >= this._textures.length) {
			if(this.loop && this.targetLoop <= 0 || this.targetLoop < this.loopCount) {
				this._currentTime -= this._textures.length;
				this.loopCount++;
			} else {
				targetFrame = this._textures.length - 1;
				this.stop();
			}
			if(this.frameDelay <= 0) {
				this.emit(controls_AnimationController.ON_COMPLETE,this);
				this.nextQueu();
			}
		}
		if(targetFrame != this.currentFrame) {
			this.currentFrame = targetFrame;
			this.updateTextures();
			this.emit(controls_AnimationController.ON_CHANGE,this);
		}
		var _g = 0;
		var _g1 = this.frameListeners;
		while(_g < _g1.length) {
			var flag = _g1[_g];
			++_g;
			if(this._currentAnimation.indexOf(flag.animation) == -1) {
				continue;
			}
			var test = this.currentFrame;
			if(this._currentAnimation.indexOf("instant") >= 0) {
				test -= this.instantDelay;
			}
			if(test >= flag.frame) {
				flag.handler(test,this);
				HxOverrides.remove(this.frameListeners,flag);
			}
		}
	}
	,updateTextures: function(force) {
		if(this.currentAnimation != this._currentAnimation || force) {
			var _this = this._textureMap;
			var key = this.currentAnimation;
			var nextTextures = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
			this._currentAnimation = this.currentAnimation;
			if(nextTextures == null || nextTextures.length == 0) {
				this.visible = false;
				console.log("Anim " + this.currentAnimation + " not found");
				return;
			}
			this.visible = true;
			this._textures = nextTextures;
		}
		this.frameCount = this._textures.length;
		this.currentFrame = this.currentFrame >= this._textures.length?this._textures.length - 1:this.currentFrame;
		this.texture = this._textures[this.currentFrame];
		this.anchor.x = this.anchor.y = 0.5;
	}
	,__class__: controls_AnimationController
});
var controls_Background = function() {
	this.offy = 0;
	this.offx = 0;
	PIXI.Container.call(this);
	this.initializeControls();
};
controls_Background.__name__ = true;
controls_Background.__super__ = PIXI.Container;
controls_Background.prototype = $extend(PIXI.Container.prototype,{
	initializeControls: function() {
		this.bg = new PIXI.extras.TilingSprite(util_Asset.getTexture("bg.jpg",false),2048,2048);
		this.bg.texture.baseTexture.mipmap = false;
		this.bg.tileScale.x = this.bg.tileScale.y = 0.5;
		this.filter = new filters_bg_BgFilter();
		this.filterArea = Main.instance.renderer.screen;
		this.filters = [this.filter];
		this.addChild(this.bg);
	}
	,rememberPosition: function(charpos) {
		this.offx += -charpos.x;
		this.offy += -charpos.y;
	}
	,update: function(charX,charY) {
		this.bg.tilePosition.x = (charX + this.offx) % 2048;
		this.bg.tilePosition.y = (charY + this.offy) % 2048;
	}
	,resize: function(size) {
		this.filter.resize(size);
	}
	,__class__: controls_Background
});
var controls_Block = function(x,y) {
	this.added = false;
	PIXI.Container.call(this);
	this.x = x;
	this.y = y;
	this.initializeControls();
};
controls_Block.__name__ = true;
controls_Block.__super__ = PIXI.Container;
controls_Block.prototype = $extend(PIXI.Container.prototype,{
	initializeControls: function() {
		this.type = ++controls_Block.blockType % 3 + 1;
		this.block = util_Asset.getImage("block_" + this.type + ".png",true);
		this.block.anchor.x = this.block.anchor.y = 0.5;
		this.hitArea = new PIXI.Rectangle(-this.block.width / 2,-this.block.height / 2,this.block.width,this.block.height);
		this.addChild(this.block);
	}
	,randomize: function(x,y) {
		this.scale.x = this.scale.y = 1;
		this.alpha = 1;
		this.visible = true;
		this.block.rotation = (Math.random() - 0.5) * 2.5;
		if(this.block.rotation < 0) {
			this.block.rotation = Math.min(-0.6,this.block.rotation);
		} else {
			this.block.rotation = Math.max(-0.6,this.block.rotation);
		}
		if(this.type == 1) {
			this.body = Matter.Bodies.fromVertices(x,y,[{ x : 62, y : 19},{ x : 119, y : 54},{ x : 137, y : 119},{ x : 109, y : 162},{ x : 46, y : 140},{ x : 32, y : 82}],{ isStatic : true, angle : this.block.rotation});
		} else if(this.type == 2) {
			this.body = Matter.Bodies.fromVertices(x,y,[{ x : 42, y : 19},{ x : 216, y : 18},{ x : 246, y : 37},{ x : 247, y : 51},{ x : 227, y : 69},{ x : 208, y : 74},{ x : 30, y : 74},{ x : 14, y : 49}],{ isStatic : true, angle : this.block.rotation});
		} else {
			this.body = Matter.Bodies.fromVertices(x,y,[{ x : 76, y : 25},{ x : 123, y : 53},{ x : 118, y : 103},{ x : 58, y : 113},{ x : 41, y : 97},{ x : 40, y : 64}],{ isStatic : true, angle : this.block.rotation});
		}
		this.added = true;
		this.x = x;
		this.y = y;
	}
	,__class__: controls_Block
});
var controls_Blocks = function() {
	this.previousSpawn = 0;
	this.size = new PIXI.Rectangle(0,0,100,100);
	PIXI.Container.call(this);
	this.initializeControls();
};
controls_Blocks.__name__ = true;
controls_Blocks.__super__ = PIXI.Container;
controls_Blocks.prototype = $extend(PIXI.Container.prototype,{
	initializeControls: function() {
		var _gthis = this;
		this.blocks = [];
		this.pool = new util_Pool(50,function() {
			var b = new controls_Block(0,-999);
			_gthis.blocks.push(b);
			b.visible = false;
			b.interactive = true;
			b.addListener("click",$bind(_gthis,_gthis.onBlockClick));
			b.addListener("tap",$bind(_gthis,_gthis.onBlockClick));
			_gthis.addChild(b);
			return b;
		});
	}
	,onBlockClick: function(e) {
		var b = e.currentTarget;
		if(b.body == null) {
			return;
		}
		console.log("Remove body");
		Matter.World.remove(Main.instance.world,b.body);
		b.body = null;
		createjs.Tween.get(b).to({ alpha : 0},75);
		createjs.Tween.get(b.scale).to({ x : 1.5, y : 1.5},75,createjs.Ease.quadOut).call(function() {
			b.visible = false;
		});
		sounds_Sounds.playEffect(sounds_Sounds.BLOCK_BREAK);
	}
	,resize: function(size) {
		this.size = size;
	}
	,clear: function() {
		var _g = 0;
		var _g1 = this.blocks;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body != null) {
				Matter.World.remove(Main.instance.world,b.body);
			}
			b.visible = false;
		}
	}
	,update: function(charpos) {
		if(Math.abs(this.previousSpawn - charpos.y) > 100) {
			this.previousSpawn = charpos.y;
			var b = this.pool.getNext();
			if(b.body != null) {
				Matter.World.remove(Main.instance.world,b.body);
			}
			b.randomize(charpos.x + (Math.random() - 0.5) * this.size.width * 2,charpos.y + this.size.height / Main.instance.viewport.scale.x);
			Matter.World.add(Main.instance.world,b.body);
			b.visible = true;
		}
		var _g = 0;
		var _g1 = this.pool.get_all();
		while(_g < _g1.length) {
			var b1 = _g1[_g];
			++_g;
		}
	}
	,__class__: controls_Blocks
});
var controls_Character = function() {
	this.prev = null;
	PIXI.Container.call(this);
	this.initializeControls();
};
controls_Character.__name__ = true;
controls_Character.__super__ = PIXI.Container;
controls_Character.prototype = $extend(PIXI.Container.prototype,{
	initializeControls: function() {
		this.sprite = util_Asset.getImage("collector/collector_1.png",true);
		this.sprite.anchor.x = 0.5;
		this.sprite.anchor.y = 0.45;
		this.sprite.scale.x = this.sprite.scale.y = 0.7;
		var sprite2 = util_Asset.getImage("collector/collector_2.png",true);
		sprite2.anchor.x = 0.5;
		sprite2.anchor.y = this.sprite.anchor.y;
		sprite2.scale.x = sprite2.scale.y = 0.7;
		var sprite3 = util_Asset.getImage("collector/collector_3.png",true);
		sprite3.anchor.x = 0.5;
		sprite3.anchor.y = this.sprite.anchor.y;
		sprite3.scale.x = sprite3.scale.y = 0.7;
		var sprite4 = util_Asset.getImage("collector/collector_4.png",true);
		sprite4.anchor.x = 0.5;
		sprite4.anchor.y = this.sprite.anchor.y;
		sprite4.scale.x = sprite4.scale.y = 0.7;
		this.sprite.blendMode = PIXI.BLEND_MODES.ADD;
		sprite2.blendMode = PIXI.BLEND_MODES.ADD;
		sprite3.blendMode = PIXI.BLEND_MODES.ADD;
		sprite4.blendMode = PIXI.BLEND_MODES.ADD;
		this.sprite.alpha = sprite2.alpha = sprite3.alpha = sprite4.alpha = 0.2;
		var tmp = Math.PI * 2;
		createjs.Tween.get(this.sprite,{ loop : true}).to({ rotation : tmp},18000);
		var tmp1 = Math.PI * 2;
		createjs.Tween.get(sprite2,{ loop : true}).to({ rotation : tmp1},18300);
		var tmp2 = -Math.PI * 2;
		createjs.Tween.get(sprite3,{ loop : true}).to({ rotation : tmp2},18200);
		var tmp3 = -Math.PI * 2;
		createjs.Tween.get(sprite4,{ loop : true}).to({ rotation : tmp3},18100);
		this.addChild(sprite2);
		this.addChild(sprite2);
		this.addChild(sprite3);
		this.arrow = util_Asset.getImage("collector/collector_arrow.png",true);
		this.arrow.scale = this.sprite.scale;
		this.arrow.anchor = this.sprite.anchor;
		this.addChild(this.arrow);
		this.body = Matter.Bodies.circle(0,0,this.sprite.width / 2 * 0.8,{ friction : 0.00001, restitution : 0.5, density : 0.001});
		Matter.World.add(Main.instance.world,this.body);
		this.addChild(this.sprite);
		Main.instance.tickListeners.push($bind(this,this.ontick));
		window.Matter.Events.on(Main.instance.engine,"collisionStart",function(e) {
			sounds_Sounds.playEffect(sounds_Sounds.BLOCK_HIT,0,0.3);
		});
	}
	,ontick: function(d) {
	}
	,__class__: controls_Character
});
var controls_Charge = function() {
	this.amount = 0;
	PIXI.Container.call(this);
	this.initializeControls();
};
controls_Charge.__name__ = true;
controls_Charge.__super__ = PIXI.Container;
controls_Charge.prototype = $extend(PIXI.Container.prototype,{
	initializeControls: function() {
		this.beaker = util_Asset.getImage("corner beaker.png",true);
		this.beaker.scale.x = this.beaker.scale.y = 0.4;
		this.beaker.anchor.x = 0.0;
		var ts = { };
		ts.fontSize = 70;
		ts.fontFamily = "pigment_demoregular";
		this.count = new PIXI.Text("5",ts);
		this.count.x = 70;
		this.count.y = -140;
		this.beaker.addChild(this.count);
		this.beaker.anchor.y = 1;
		this.charge = util_Asset.getImage("charge_slider.png",true);
		this.slider = util_Asset.getImage("charge_sliderPointer.png",true);
		this.slider.anchor.x = 0.5;
		this.charge.anchor.x = 0.5;
		this.charge.scale.x = this.charge.scale.y = 0.7;
		this.charge.addChild(this.slider);
		this.addChild(this.beaker);
		this.addChild(this.charge);
		this.charge.pivot.y = 100;
		this.beaker.pivot.x = 200;
	}
	,updateCharge: function(amount) {
		if(Math.abs(amount) > 5 && Math.abs(this.amount) == 5) {
			amount = Math.min(5,Math.max(-5,amount));
			createjs.Tween.get(this.slider).to({ x : amount * 28},350,createjs.Ease.backInOut).to({ x : amount * 27},350,createjs.Ease.backInOut);
		} else {
			amount = Math.min(5,Math.max(-5,amount));
			createjs.Tween.get(this.slider).to({ x : amount * 27},350,createjs.Ease.backInOut);
			this.amount = amount;
		}
	}
	,show: function() {
		this.amount = 0;
		createjs.Tween.get(this.charge.pivot).to({ y : -90},450,createjs.Ease.getBackOut(0.3));
		createjs.Tween.get(this.beaker.pivot).to({ x : 0},450,createjs.Ease.getBackOut(0.3));
	}
	,hide: function() {
		createjs.Tween.get(this.charge.pivot).to({ y : 100},450,createjs.Ease.backIn);
		createjs.Tween.get(this.beaker.pivot).to({ x : 200},450,createjs.Ease.backIn);
	}
	,resize: function(size) {
		this.charge.x = size.width / 2;
		this.beaker.y = size.height;
		this.beaker.x = 0;
	}
	,shake: function() {
		createjs.Tween.get(this.beaker).to({ rotation : 0.2},100).to({ rotation : 0},100).to({ rotation : 0.2},100).to({ rotation : 0},100).to({ rotation : 0.2},100).to({ rotation : 0},100).to({ rotation : 0.2},100).to({ rotation : 0},100);
		createjs.Tween.get(this.beaker.scale).to({ x : 0.45, y : 0.45},100).to({ x : 0.4, y : 0.4},100).to({ x : 0.45, y : 0.45},100).to({ x : 0.4, y : 0.4},100).to({ x : 0.45, y : 0.45},100).to({ x : 0.4, y : 0.4},100).to({ x : 0.45, y : 0.45},100).to({ x : 0.4, y : 0.4},100);
	}
	,__class__: controls_Charge
});
var controls_CType = { __ename__ : true, __constructs__ : ["oxygen","lithium","aluminium","magnesium","brohm"] };
controls_CType.oxygen = ["oxygen",0];
controls_CType.oxygen.toString = $estr;
controls_CType.oxygen.__enum__ = controls_CType;
controls_CType.lithium = ["lithium",1];
controls_CType.lithium.toString = $estr;
controls_CType.lithium.__enum__ = controls_CType;
controls_CType.aluminium = ["aluminium",2];
controls_CType.aluminium.toString = $estr;
controls_CType.aluminium.__enum__ = controls_CType;
controls_CType.magnesium = ["magnesium",3];
controls_CType.magnesium.toString = $estr;
controls_CType.magnesium.__enum__ = controls_CType;
controls_CType.brohm = ["brohm",4];
controls_CType.brohm.toString = $estr;
controls_CType.brohm.__enum__ = controls_CType;
var controls_Collectable = function(type) {
	PIXI.Container.call(this);
	this.type = type;
	this.initializeControls();
};
controls_Collectable.__name__ = true;
controls_Collectable.__super__ = PIXI.Container;
controls_Collectable.prototype = $extend(PIXI.Container.prototype,{
	initializeControls: function() {
		this.ac = new controls_AnimationController([util_Asset.getTextures(util_Asset.getResource("img/" + this.type[0] + ".json").data,new EReg("Idle/.*","")),util_Asset.getTextures(util_Asset.getResource("img/" + this.type[0] + ".json").data,new EReg("Blink/.*",""))],["idle","blink"]);
		this.addChild(this.ac);
		this.ac.gotoAndPlay("idle");
		this.ac.loop = true;
		this.ac.animationSpeed = 0.083333333333333329;
		this.scale.x = this.scale.y = 0.5;
		this.restartTimer();
	}
	,restartTimer: function() {
		if(this.idleTimer != null) {
			this.idleTimer.stop();
		}
		this.idleTimer = new haxe_Timer(Math.floor(Math.random() * 3 + 1) * 500);
		this.idleTimer.run = $bind(this,this.ontick);
	}
	,ontick: function() {
		var _gthis = this;
		this.ac.gotoAndPlay("blink");
		this.restartTimer();
		var tmp = Math.floor(100 + Math.floor(Math.random() * 100));
		haxe_Timer.delay(function() {
			_gthis.ac.gotoAndPlay("idle");
		},tmp);
	}
	,__class__: controls_Collectable
});
var controls_CompoundType = { __ename__ : true, __constructs__ : ["alu_bromide","alu_oxide","lithium_bromide","lithium_oxide","mag_bromide","mag_oxide"] };
controls_CompoundType.alu_bromide = ["alu_bromide",0];
controls_CompoundType.alu_bromide.toString = $estr;
controls_CompoundType.alu_bromide.__enum__ = controls_CompoundType;
controls_CompoundType.alu_oxide = ["alu_oxide",1];
controls_CompoundType.alu_oxide.toString = $estr;
controls_CompoundType.alu_oxide.__enum__ = controls_CompoundType;
controls_CompoundType.lithium_bromide = ["lithium_bromide",2];
controls_CompoundType.lithium_bromide.toString = $estr;
controls_CompoundType.lithium_bromide.__enum__ = controls_CompoundType;
controls_CompoundType.lithium_oxide = ["lithium_oxide",3];
controls_CompoundType.lithium_oxide.toString = $estr;
controls_CompoundType.lithium_oxide.__enum__ = controls_CompoundType;
controls_CompoundType.mag_bromide = ["mag_bromide",4];
controls_CompoundType.mag_bromide.toString = $estr;
controls_CompoundType.mag_bromide.__enum__ = controls_CompoundType;
controls_CompoundType.mag_oxide = ["mag_oxide",5];
controls_CompoundType.mag_oxide.toString = $estr;
controls_CompoundType.mag_oxide.__enum__ = controls_CompoundType;
var controls_Compound = function(type) {
	PIXI.Container.call(this);
	this.type = type;
	this.initializeControls();
};
controls_Compound.__name__ = true;
controls_Compound.__super__ = PIXI.Container;
controls_Compound.prototype = $extend(PIXI.Container.prototype,{
	initializeControls: function() {
		this.ac = new controls_AnimationController([util_Asset.getTextures(util_Asset.getResource("img/" + this.type[0] + ".json").data,new EReg("Idle/.*","")),util_Asset.getTextures(util_Asset.getResource("img/" + this.type[0] + ".json").data,new EReg("Blink/.*",""))],["idle","blink"]);
		this.addChild(this.ac);
		this.ac.gotoAndPlay("idle");
		this.ac.loop = true;
		this.ac.animationSpeed = 0.083333333333333329;
		this.scale.x = this.scale.y = 0.5;
		this.restartTimer();
	}
	,restartTimer: function() {
		if(this.idleTimer != null) {
			this.idleTimer.stop();
		}
		this.idleTimer = new haxe_Timer(Math.floor(Math.random() * 3 + 1) * 500);
		this.idleTimer.run = $bind(this,this.ontick);
	}
	,ontick: function() {
		var _gthis = this;
		this.ac.gotoAndPlay("blink");
		this.restartTimer();
		var tmp = Math.floor(100 + Math.floor(Math.random() * 100));
		haxe_Timer.delay(function() {
			_gthis.ac.gotoAndPlay("idle");
		},tmp);
	}
	,__class__: controls_Compound
});
var controls_DeviceOrientationControl = function() {
};
controls_DeviceOrientationControl.__name__ = true;
controls_DeviceOrientationControl.initialize = function() {
	controls_DeviceOrientationControl.camera = new THREE.PerspectiveCamera();
	controls_DeviceOrientationControl.camera = controls_DeviceOrientationControl.camera;
	controls_DeviceOrientationControl.camera.rotation.reorder("YXZ");
	window.addEventListener("deviceorientation",controls_DeviceOrientationControl.handleDeviceOrientation);
	window.addEventListener("orientationchange",controls_DeviceOrientationControl.handleScreenOrientation);
	console.log("Orientation controller started");
	controls_DeviceOrientationControl.handleScreenOrientation(null);
};
controls_DeviceOrientationControl.handleScreenOrientation = function(e) {
	if(window.orientation == null) {
		controls_DeviceOrientationControl.screenOrientation = 0;
	} else {
		controls_DeviceOrientationControl.screenOrientation = window.orientation;
	}
};
controls_DeviceOrientationControl.handleDeviceOrientation = function(e) {
	controls_DeviceOrientationControl.absolute = e.absolute;
	controls_DeviceOrientationControl.beta = e.beta;
	controls_DeviceOrientationControl.alpha = e.alpha;
	controls_DeviceOrientationControl.gamma = e.gamma;
	var alpha = THREE.Math.degToRad(controls_DeviceOrientationControl.alpha);
	var beta = THREE.Math.degToRad(controls_DeviceOrientationControl.beta);
	var gamma = THREE.Math.degToRad(controls_DeviceOrientationControl.gamma);
	var orient = THREE.Math.degToRad(0);
	var currentQ = controls_DeviceOrientationControl.camera.quaternion;
	(controls_DeviceOrientationControl.setObjectQuaternion())(currentQ,alpha,beta,gamma,orient);
	var rotation = new THREE.Euler().setFromQuaternion(currentQ,"YXZ");
	Main.instance.updateRotation(rotation.z,rotation.x);
};
controls_DeviceOrientationControl.setObjectQuaternion = function() {
	var zee = new THREE.Vector3(0,0,1);
	var euler = new THREE.Euler();
	var q0 = new THREE.Quaternion();
	var q1 = new THREE.Quaternion(-Math.sqrt(0.5),0,0,Math.sqrt(0.5));
	return function(quaternion,alpha,beta,gamma,orient) {
		euler.set(beta,alpha,-gamma,"YXZ");
		quaternion.setFromEuler(euler);
		quaternion.multiply(q1);
		quaternion.multiply(q0.setFromAxisAngle(zee,-orient));
	};
};
controls_DeviceOrientationControl.Quat2Angle = function(x,y,z,w) {
	var pitch;
	var roll;
	var yaw;
	var test = x * y + z * w;
	if(test > 0.499) {
		yaw = 2 * Math.atan2(x,w);
		pitch = Math.PI / 2;
		roll = 0;
		return new THREE.Vector3(pitch,roll,yaw);
	}
	if(test < -0.499) {
		yaw = -2 * Math.atan2(x,w);
		pitch = -Math.PI / 2;
		roll = 0;
		return new THREE.Vector3(pitch,roll,yaw);
	}
	var sqx = x * x;
	var sqy = y * y;
	var sqz = z * z;
	yaw = Math.atan2(2 * y * w - 2 * x * z,1 - 2 * sqy - 2 * sqz);
	pitch = Math.asin(2 * test);
	roll = Math.atan2(2 * x * w - 2 * y * z,1 - 2 * sqx - 2 * sqz);
	return new THREE.Vector3(pitch,roll,yaw);
};
controls_DeviceOrientationControl.prototype = {
	__class__: controls_DeviceOrientationControl
};
var controls_EndUi = function() {
	PIXI.Container.call(this);
	this.initializeControls();
};
controls_EndUi.__name__ = true;
controls_EndUi.__super__ = PIXI.Container;
controls_EndUi.prototype = $extend(PIXI.Container.prototype,{
	initializeControls: function() {
		this.replay = util_Asset.getImage("UI_replay.png",true);
		this.info = util_Asset.getImage("UI_info button.png",true);
		this.infoLabel = util_Asset.getImage("help_bg.png",true);
		this.replay.scale.x = this.replay.scale.y = 0.5;
		this.info.scale.x = this.info.scale.y = 0.5;
		this.replay.interactive = true;
		var ts = { };
		ts.wordWrap = false;
		ts.fontSize = 24;
		ts.fontFamily = "pigment_demoregular";
		this.infoText = new PIXI.Text("Lithium oxide or lithia is an\ninorganic chemical compound.\nIt is a white solid.",ts);
		var ts1 = { };
		ts1.wordWrap = false;
		ts1.fontSize = 34;
		ts1.align = "center";
		ts1.fontFamily = "pigment_demoregular";
		this.rating = new PIXI.Text("Perfect!",ts1);
		this.infoC = new PIXI.Container();
		this.infoC.addChild(this.infoLabel);
		this.infoC.addChild(this.infoText);
		this.infoLabel.x = 0;
		this.infoLabel.y = 0;
		this.infoLabel.width = this.infoText.width;
		this.infoLabel.height = this.infoText.height;
		this.infoC.visible = false;
		this.info.interactive = true;
		this.info.addListener("click",$bind(this,this.onInfoclick));
		this.info.addListener("tap",$bind(this,this.onInfoclick));
		this.infoC.interactive = true;
		this.infoC.addListener("click",$bind(this,this.onInfoclick));
		this.infoC.addListener("tap",$bind(this,this.onInfoclick));
		this.replay.addListener("click",$bind(this,this.onreplay));
		this.replay.addListener("tap",$bind(this,this.onreplay));
		this.addChild(this.infoC);
		this.addChild(this.info);
		this.addChild(this.replay);
		this.addChild(this.rating);
	}
	,onreplay: function(e) {
		Main.instance.replay();
		sounds_Sounds.playEffect(sounds_Sounds.TOGGLE);
	}
	,onInfoclick: function(e) {
		this.infoC.visible = !this.infoC.visible;
		sounds_Sounds.playEffect(sounds_Sounds.TOGGLE);
	}
	,resize: function(size) {
		this.info.x = size.width - this.info.width;
		this.info.y = 50;
		this.replay.x = 0;
		this.replay.y = 50;
		this.infoC.x = (size.width - this.infoC.width) / 2;
		this.infoC.y = size.height - this.infoC.height - 10;
		this.rating.x = size.width / 2;
		this.rating.y = 300;
	}
	,hide: function() {
		createjs.Tween.removeTweens(this.rating.scale);
		createjs.Tween.removeTweens(this.rating);
		createjs.Tween.get(this.rating.scale).to({ x : 0, y : 0},300);
		this.visible = false;
	}
	,show: function(rating) {
		this.visible = true;
		if(rating == 0) {
			this.rating.text = "Extra materials\ndetected.";
		} else if(rating == 1) {
			this.rating.text = "Ions not in\nequilibrium!";
		} else {
			this.rating.text = "Perfect!";
		}
		this.rating.scale.x = this.rating.scale.y = 1;
		this.rating.pivot.x = this.rating.width / 2;
		this.rating.pivot.y = this.rating.height / 2;
		this.rating.scale.x = this.rating.scale.y = 0;
		createjs.Tween.get(this.rating.scale).wait(2000,true).to({ x : 1, y : 1},500,createjs.Ease.backOut);
		this.rating.rotation = 0.2;
		createjs.Tween.get(this.rating,{ loop : true}).to({ rotation : -0.2},600,createjs.Ease.quadInOut).to({ rotation : 0.2},600,createjs.Ease.quadInOut);
		sounds_Sounds.playEffect(sounds_Sounds.VICTORY,0,1,2250);
	}
	,__class__: controls_EndUi
});
var controls_GameView = $hx_exports["GV"] = function() {
	this.xspawn = [];
	this.roundrobin = [];
	this.rating = 0;
	this.ending = false;
	this.running = false;
	this.previousSpawn = 0;
	this.active = [];
	this.maxvelocity = 3.0;
	this.dropSpeed = 0;
	this.time = 0;
	this.charpos = new PIXI.Point();
	PIXI.Container.call(this);
	this.colmap = new haxe_ds_EnumValueMap();
	this.oxygen = new util_Pool(10,function() {
		return new controls_Collectable(controls_CType.oxygen);
	});
	this.lithium = new util_Pool(10,function() {
		return new controls_Collectable(controls_CType.lithium);
	});
	this.magnesium = new util_Pool(10,function() {
		return new controls_Collectable(controls_CType.magnesium);
	});
	this.aluminium = new util_Pool(10,function() {
		return new controls_Collectable(controls_CType.aluminium);
	});
	this.brohm = new util_Pool(10,function() {
		return new controls_Collectable(controls_CType.brohm);
	});
	this.colmap.set(controls_CType.oxygen,this.oxygen);
	this.colmap.set(controls_CType.lithium,this.lithium);
	this.colmap.set(controls_CType.magnesium,this.magnesium);
	this.colmap.set(controls_CType.aluminium,this.aluminium);
	this.colmap.set(controls_CType.brohm,this.brohm);
	this.allCollectables = [this.oxygen,this.lithium,this.magnesium,this.aluminium,this.brohm];
	this.initializeControls();
};
controls_GameView.__name__ = true;
controls_GameView.__super__ = PIXI.Container;
controls_GameView.prototype = $extend(PIXI.Container.prototype,{
	start: function() {
		Matter.Body.setPosition(this.character.body,{ x : 0, y : 0});
		this.blocks.alpha = 1;
		this.collectables.alpha = 1;
		Main.instance.bg.rememberPosition(this.charpos);
		createjs.Tween.get(this.character).to({ alpha : 1},1000);
		createjs.Tween.get(this.jar).to({ alpha : 0},1000);
		this.ending = false;
		this.collectables.removeChildren();
		this.blocks.clear();
		this.charpos.x = this.charpos.y = 0;
		this.active = [];
		this.extra = [];
		this.current = [];
		if(this.roundrobin.length == 0) {
			this.roundrobin = [0,1,2,3,4,5];
			this.roundrobin = util_MathUtil.shuffle(this.roundrobin,new Date().getTime());
		}
		controls_GameView.CONF = [{ instruction : "litiumoksidin_reaktio_intro.png", 'final' : "litiumoksidin_reaktio.png", conf : [controls_CType.lithium,controls_CType.lithium,controls_CType.oxygen], compound : controls_CompoundType.lithium_oxide},{ instruction : "litiumbromidin_reaktio_intro.png", 'final' : "litiumbromidin_reaktio.png", conf : [controls_CType.lithium,controls_CType.brohm], compound : controls_CompoundType.lithium_bromide},{ instruction : "magnesiumbromidin_reaktio_intro.png", 'final' : "magnesiumbromidin_reaktio.png", conf : [controls_CType.magnesium,controls_CType.brohm,controls_CType.brohm], compound : controls_CompoundType.mag_bromide},{ instruction : "magnesiumoksidin_reaktio_intro.png", 'final' : "magnesiumoksidin_reaktio.png", conf : [controls_CType.magnesium,controls_CType.oxygen], compound : controls_CompoundType.mag_oxide},{ instruction : "alumiinibromidin_reaktio_intro.png", 'final' : "alumiinibromidin_reaktio.png", conf : [controls_CType.aluminium,controls_CType.brohm,controls_CType.brohm,controls_CType.brohm], compound : controls_CompoundType.alu_bromide},{ instruction : "alumiinioksidin_reaktio_intro.png", 'final' : "alumiinioksidin_reaktio.png", conf : [controls_CType.aluminium,controls_CType.aluminium,controls_CType.oxygen,controls_CType.oxygen,controls_CType.oxygen], compound : controls_CompoundType.alu_oxide}][this.roundrobin.pop()];
		var conf = controls_GameView.CONF.conf;
		this.baseconf = conf;
		Matter.Body.setStatic(this.character.body,false);
		var amount = Math.round(20 / conf.length);
		this.requiredPairs = 3;
		this.ui.updatePairAmount(this.requiredPairs);
		var types = [];
		var _g = 0;
		while(_g < conf.length) {
			var t = conf[_g];
			++_g;
			if(types.indexOf(t) == -1) {
				types.push(t);
			}
		}
		this.ui.target1.setType(types[0]);
		this.ui.target2.setType(types[1]);
		this.running = true;
		this.updatePairs();
	}
	,applyCharMove: function(angle) {
		if(angle < 0) {
			angle = Math.max(-8,angle);
		} else if(angle > 0) {
			angle = Math.min(8,angle);
		}
		Matter.Body.applyForce(this.character.body,{ x : 0, y : 0},{ x : -angle / 15, y : 0});
		this.charpos.x += angle;
	}
	,initializeControls: function() {
		this.collectables = new PIXI.Container();
		this.character = new controls_Character();
		Matter.Body.setStatic(this.character.body,true);
		this.blocks = new controls_Blocks();
		this.addChild(this.blocks);
		this.addChild(this.collectables);
		this.addChild(this.character);
		this.jar = new controls_Jar();
		this.addChild(this.jar);
		this.jar.visible = false;
		Main.instance.tickListeners.push($bind(this,this.onTick));
		this.character.alpha = 0;
	}
	,onTick: function(delta) {
		this.time += delta;
		if(!this.running) {
			return;
		}
		this.charpos.x = this.character.body.position.x;
		this.charpos.y = this.character.body.position.y;
		Matter.Body.setVelocity(this.character.body,{ x : Math.min(this.maxvelocity,Math.max(-this.maxvelocity,this.character.body.velocity.x)), y : Math.max(-this.maxvelocity,Math.min(this.maxvelocity,this.character.body.velocity.y))});
		Main.instance.bg.update(-this.charpos.x,-this.charpos.y);
		this.blocks.y = -this.charpos.y;
		this.blocks.x = -this.charpos.x;
		this.collectables.x = -this.charpos.x;
		this.collectables.y = -this.charpos.y;
		if(!this.ending) {
			this.blocks.update(this.charpos);
			this.spawnCollectable();
			this.collect();
		}
	}
	,collect: function() {
		var _gthis = this;
		var remove = [];
		var _g = 0;
		var _g1 = this.active;
		while(_g < _g1.length) {
			var c = [_g1[_g]];
			++_g;
			var cp = this.collectables.toLocal(new PIXI.Point(this.size.width / 2,this.size.height / 2));
			var dx = cp.x - c[0].x;
			var dy = cp.y - c[0].y;
			if(Math.sqrt(dx * dx + dy * dy) < 95) {
				var wrong = false;
				if(this.baseconf.indexOf(c[0].type) >= 0) {
					this.current.push(c[0].type);
				} else {
					wrong = true;
					Main.instance.bg.filter.wrong();
					this.extra.push(c[0].type);
				}
				remove.push(c[0]);
				cp.x += this.character.body.velocity.x * 20;
				cp.y += this.character.body.velocity.y * 20;
				if(!wrong) {
					sounds_Sounds.playEffect(sounds_Sounds.BLOB_SUCK,0,0.6);
					createjs.Tween.get(c[0]).to({ x : cp.x, y : cp.y},350,createjs.Ease.quadOut);
					createjs.Tween.get(c[0].scale).to({ x : 0, y : 0},350,createjs.Ease.quadOut).call((function(c1) {
						return function() {
							_gthis.collectables.removeChild(c1[0]);
							_gthis.updatePairs();
						};
					})(c));
				} else {
					sounds_Sounds.playEffect(sounds_Sounds.BLOB_WRONG);
					createjs.Tween.get(c[0]).to({ alpha : 0},350);
					createjs.Tween.get(c[0].scale).to({ x : 1.5, y : 1.5},350,createjs.Ease.quadOut).call((function(c2) {
						return function() {
							_gthis.collectables.removeChild(c2[0]);
							_gthis.updatePairs();
						};
					})(c));
				}
			}
			if(c[0].getBounds().y < -this.size.height) {
				remove.push(c[0]);
				this.collectables.removeChild(c[0]);
			}
		}
		var _g2 = 0;
		while(_g2 < remove.length) {
			var c3 = remove[_g2];
			++_g2;
			HxOverrides.remove(this.active,c3);
		}
	}
	,updatePairs: function() {
		var _gthis = this;
		var lc = 0;
		var rc = 0;
		var conf = this.baseconf.slice(0);
		var removeFromCur = [];
		var charge = 0;
		var _g = 0;
		var _g1 = this.current;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c == this.ui.target1.type) {
				++lc;
			} else if(c == this.ui.target2.type) {
				++rc;
			}
			if(conf.indexOf(c) >= 0) {
				HxOverrides.remove(conf,c);
				removeFromCur.push(c);
			}
			if(c == controls_CType.lithium) {
				++charge;
			} else if(c == controls_CType.brohm) {
				--charge;
			} else if(c == controls_CType.oxygen) {
				charge -= 2;
			} else if(c == controls_CType.magnesium) {
				charge += 2;
			} else if(c == controls_CType.aluminium) {
				charge += 3;
			}
		}
		this.ui.charge.updateCharge(charge);
		this.ui.target1.setcount(lc);
		this.ui.target2.setcount(rc);
		if(conf.length == 0) {
			var _g2 = 0;
			while(_g2 < removeFromCur.length) {
				var c1 = removeFromCur[_g2];
				++_g2;
				HxOverrides.remove(this.current,c1);
			}
		}
		haxe_Timer.delay(function() {
			if(conf.length == 0) {
				_gthis.requiredPairs--;
				_gthis.updatePairs();
				_gthis.ui.formPair(_gthis.baseconf,_gthis.requiredPairs);
				if(_gthis.requiredPairs == 0 && !_gthis.ending) {
					_gthis.rating = _gthis.extra.length > 0?0:charge == 0?2:1;
					_gthis.ending = true;
					haxe_Timer.delay(($_=_gthis.ui,$bind($_,$_.hide)),4000);
					createjs.Tween.get(_gthis.character).wait(1500,true).to({ alpha : 0},2500);
					createjs.Tween.get(_gthis.collectables).wait(1500,true).to({ alpha : 0},2500);
					createjs.Tween.get(_gthis.blocks).wait(1500,true).to({ alpha : 0},2500).wait(1500,true).call($bind(_gthis,_gthis.endgame));
				}
			}
		},350);
	}
	,endgame: function() {
		particles_ParticleManager.words.show();
		this.running = false;
		this.jar.randomize();
		this.jar.visible = true;
		createjs.Tween.get(this.jar).to({ alpha : 1},500);
	}
	,hide: function() {
		createjs.Tween.get(this.jar).to({ alpha : 0},250);
	}
	,spawnCollectable: function() {
		if(!this.ending && Math.abs(this.previousSpawn - this.charpos.y) > 100) {
			if(this.xspawn.length == 0) {
				var _g = 0;
				while(_g < 20) {
					var i = _g++;
					this.xspawn.push(Math.random() / 20 + i / 20);
				}
				this.xspawn = util_MathUtil.shuffle(this.xspawn,new Date().getTime());
			}
			console.log("spawn");
			this.previousSpawn = this.charpos.y;
			var rnd = this.baseconf.slice(0);
			rnd.push(controls_CType.aluminium);
			rnd.push(controls_CType.brohm);
			rnd.push(controls_CType.lithium);
			rnd.push(controls_CType.magnesium);
			rnd.push(controls_CType.oxygen);
			var c = this.colmap.get(rnd[Math.floor(Math.random() * rnd.length)]).getNext();
			this.collectables.addChild(c);
			c.scale.x = c.scale.y = 0.5;
			this.active.push(c);
			c.x = this.charpos.x + this.xspawn.pop() * this.size.width * 2;
			c.y = this.charpos.y + this.size.height / Main.instance.viewport.scale.x;
		}
	}
	,resize: function(size) {
		this.size = size;
		this.blocks.resize(size);
		this.jar.y = size.height / 2 / Main.instance.viewport.scale.x;
		this.jar.resize(size);
	}
	,__class__: controls_GameView
});
var controls_Help = function() {
	PIXI.Container.call(this);
	this.initializeControls();
};
controls_Help.__name__ = true;
controls_Help.__super__ = PIXI.Container;
controls_Help.prototype = $extend(PIXI.Container.prototype,{
	initializeControls: function() {
		this.info = util_Asset.getImage("UI_info button.png",true);
		this.helpJar = util_Asset.getImage("instructions jar.png",true);
		this.info.interactive = true;
		this.helpJar.visible = false;
		this.info.scale.x = this.info.scale.y = 0.5;
		this.addChild(this.info);
		this.addChild(this.helpJar);
		var ts = { };
		ts.wordWrap = false;
		ts.fontSize = 35;
		ts.lineHeight = 30;
		ts.fontFamily = "pigment_demoregular";
		this.helpText = new PIXI.Text("Form 3 compounds by collecting\nions. Make sure that you get\nthe charges correct!\nAvoid unneeded elements.\n\nControl by tilting phone in\nportrait mode.\nTap salts to destroy them.\n\nChemistry\n    Anni Kukko\nGraphics\n    Laura K. Horton\nMusic\n    Lauri Leskinen\nCode+sfx\n    Henri Sarasvirta\n\n       EduGameJam 2018",ts);
		this.helpJar.addChild(this.helpText);
		this.helpText.x = 160;
		this.helpText.y = 280;
	}
	,resize: function(size) {
		this.info.x = size.width - this.info.width;
		this.info.y = 0;
		this.helpJar.scale.x = this.helpJar.scale.y = 1;
		this.helpJar.scale.x = this.helpJar.scale.y = Math.min(1,Math.min((size.width - 50) / this.helpJar.width,(size.height - 50) / this.helpJar.height));
		this.helpJar.x = Math.round((size.width - this.helpJar.width) / 2);
		this.helpJar.y = size.height - this.helpJar.height;
	}
	,__class__: controls_Help
});
var controls_Jar = function() {
	PIXI.Container.call(this);
	this.initializeControls();
};
controls_Jar.__name__ = true;
controls_Jar.__super__ = PIXI.Container;
controls_Jar.prototype = $extend(PIXI.Container.prototype,{
	initializeControls: function() {
		this.jar = util_Asset.getImage("jar_1.png",true);
		this.jar.anchor.x = 0.5;
		this.jar.anchor.y = 1;
		this.jar.scale.x = this.jar.scale.y = 0.6;
		this.addChild(this.jar);
		this.alu_bromide = this.createcompound(controls_CompoundType.alu_bromide);
		this.alu_oxide = this.createcompound(controls_CompoundType.alu_oxide);
		this.lithium_bromide = this.createcompound(controls_CompoundType.lithium_bromide);
		this.lithium_oxide = this.createcompound(controls_CompoundType.lithium_oxide);
		this.mag_bromide = this.createcompound(controls_CompoundType.mag_bromide);
		this.mag_oxide = this.createcompound(controls_CompoundType.mag_oxide);
	}
	,createcompound: function(type) {
		var c = new controls_Compound(type);
		c.pivot.y = c.height;
		c.scale.x = c.scale.y = 1;
		c.y = -180;
		this.jar.addChild(c);
		return c;
	}
	,resize: function(size) {
		this.jar.scale.x = this.jar.scale.y = 1;
		this.jar.scale.x = this.jar.scale.y = Math.min(1,Math.min(size.width / Main.instance.viewport.scale.x * 0.9 / this.jar.width,size.height / Main.instance.viewport.scale.x * 0.9 / this.jar.height));
	}
	,randomize: function() {
		if(controls_Jar.textures.length == 0) {
			controls_Jar.textures = ["1","2","3","4","5","6"];
			controls_Jar.textures = util_MathUtil.shuffle(controls_Jar.textures,new Date().getTime());
		}
		this.jar.texture = util_Asset.getTexture("jar_" + controls_Jar.textures.pop() + ".png",true);
		this.alu_bromide.visible = controls_GameView.CONF.compound == controls_CompoundType.alu_bromide;
		this.alu_oxide.visible = controls_GameView.CONF.compound == controls_CompoundType.alu_oxide;
		this.lithium_bromide.visible = controls_GameView.CONF.compound == controls_CompoundType.lithium_bromide;
		this.lithium_oxide.visible = controls_GameView.CONF.compound == controls_CompoundType.lithium_oxide;
		this.mag_bromide.visible = controls_GameView.CONF.compound == controls_CompoundType.mag_bromide;
		this.mag_oxide.visible = controls_GameView.CONF.compound == controls_CompoundType.mag_oxide;
	}
	,__class__: controls_Jar
});
var controls_PairFormer = function() {
	PIXI.Container.call(this);
	this.initializeControls();
};
controls_PairFormer.__name__ = true;
controls_PairFormer.__super__ = PIXI.Container;
controls_PairFormer.prototype = $extend(PIXI.Container.prototype,{
	initializeControls: function() {
		this.oxygen = new util_Pool(10,function() {
			return new controls_Collectable(controls_CType.oxygen);
		});
		this.lithium = new util_Pool(10,function() {
			return new controls_Collectable(controls_CType.lithium);
		});
		this.magnesium = new util_Pool(10,function() {
			return new controls_Collectable(controls_CType.magnesium);
		});
		this.aluminium = new util_Pool(10,function() {
			return new controls_Collectable(controls_CType.aluminium);
		});
		this.brohm = new util_Pool(10,function() {
			return new controls_Collectable(controls_CType.brohm);
		});
		this.pools = new haxe_ds_EnumValueMap();
		this.pools.set(controls_CType.oxygen,this.oxygen);
		this.pools.set(controls_CType.lithium,this.lithium);
		this.pools.set(controls_CType.magnesium,this.magnesium);
		this.pools.set(controls_CType.aluminium,this.aluminium);
		this.pools.set(controls_CType.brohm,this.brohm);
		this.comAluBromide = new util_Pool(10,function() {
			return new controls_Compound(controls_CompoundType.alu_bromide);
		});
		this.comAluOxide = new util_Pool(10,function() {
			return new controls_Compound(controls_CompoundType.alu_oxide);
		});
		this.comLithiumBromide = new util_Pool(10,function() {
			return new controls_Compound(controls_CompoundType.lithium_bromide);
		});
		this.comLithiumOxide = new util_Pool(10,function() {
			return new controls_Compound(controls_CompoundType.lithium_oxide);
		});
		this.comMagBromide = new util_Pool(10,function() {
			return new controls_Compound(controls_CompoundType.mag_bromide);
		});
		this.comMagOxide = new util_Pool(10,function() {
			return new controls_Compound(controls_CompoundType.mag_oxide);
		});
		this.comPools = new haxe_ds_EnumValueMap();
		this.comPools.set(controls_CompoundType.alu_bromide,this.comAluBromide);
		this.comPools.set(controls_CompoundType.alu_oxide,this.comAluOxide);
		this.comPools.set(controls_CompoundType.lithium_bromide,this.comLithiumBromide);
		this.comPools.set(controls_CompoundType.lithium_oxide,this.comLithiumOxide);
		this.comPools.set(controls_CompoundType.mag_bromide,this.comMagBromide);
		this.comPools.set(controls_CompoundType.mag_oxide,this.comMagOxide);
	}
	,resize: function(size) {
		this.size = size;
	}
	,formPairs: function(items,left,right) {
		var cc = 0;
		var cols = [];
		var _g = 0;
		while(_g < items.length) {
			var item = items[_g];
			++_g;
			var c = this.pools.get(item).getNext();
			c.visible = true;
			this.addChild(c);
			cols.push(c);
			if(item == left) {
				c.x = 50;
				c.y = 50;
			} else {
				c.x = this.size.width - 50;
				c.y = 50;
			}
			var last = cc == items.length - 1;
			c.visible = false;
			this.animateform(c,cols,last,cc,items);
			++cc;
		}
		sounds_Sounds.playEffect(sounds_Sounds.BLOBS_COMBINE);
	}
	,animateform: function(c,cols,last,cc,items) {
		var _gthis = this;
		var tmp = createjs.Tween.get(c);
		var tmp1 = cc * 250 + 50;
		var tmp2 = this.size.width / 2;
		tmp.wait(tmp1,true).call(function() {
			c.visible = true;
			createjs.Tween.get(c.scale).to({ x : 0.25, y : 0.25},500).wait(items.length * 100 - cc * 80).to({ x : 0, y : 0},1000);
			createjs.Tween.get(c.pivot).to({ x : Math.sin(Math.PI * 2 * cc / items.length) * 200, y : Math.cos(Math.PI * 2 * cc / items.length) * 200},500).wait(items.length * 100).to({ x : 0, y : 0},250);
			createjs.Tween.get(c).to({ rotation : Math.PI / 2 * 16},750 + 250 * items.length - cc * 250,createjs.Ease.quadIn);
		}).to({ x : tmp2, y : 125},250,createjs.Ease.quadOut).wait(500,true).call(function() {
			if(last) {
				sounds_Sounds.playEffect(controls_GameView.CONF.compound[0]);
				var _g = 0;
				while(_g < cols.length) {
					var cr = cols[_g];
					++_g;
					createjs.Tween.get(cr).to({ alpha : 0},400);
				}
				var com = _gthis.comPools.get(controls_GameView.CONF.compound).getNext();
				com.x = _gthis.size.width / 2;
				com.y = 200;
				_gthis.addChild(com);
				com.visible = true;
				com.alpha = 0;
				com.scale.x = com.scale.y = 0.7;
				createjs.Tween.get(com).to({ alpha : 1},250,createjs.Ease.quadOut).wait(750,true).to({ alpha : 0},500).call(function() {
					_gthis.removeChild(com);
				});
				createjs.Tween.get(com.scale).to({ x : 1, y : 1},500,createjs.Ease.quadOut).wait(250,true).to({ x : 1.3, y : 1.3},750,createjs.Ease.quadIn);
			}
		});
	}
	,__class__: controls_PairFormer
});
var controls_StartView = function() {
	PIXI.Container.call(this);
	this.initializeControls();
};
controls_StartView.__name__ = true;
controls_StartView.__super__ = PIXI.Container;
controls_StartView.prototype = $extend(PIXI.Container.prototype,{
	initializeControls: function() {
		this.logo = util_Asset.getImage("logo.png",true);
		this.start = util_Asset.getImage("start_button.png",true);
		this.start.y = 720;
		this.start.x = 110;
		this.start.interactive = true;
		this.addChild(this.logo);
		this.logo.addChild(this.start);
		this.help = new controls_Help();
		this.addChild(this.help);
		this.help.info.addListener("click",$bind(this,this.onHelpClick));
		this.help.info.addListener("tap",$bind(this,this.onHelpClick));
		this.origsize = this.getBounds();
	}
	,onHelpClick: function(e) {
		this.logo.visible = !this.logo.visible;
		this.help.helpJar.visible = !this.help.helpJar.visible;
		sounds_Sounds.playEffect(sounds_Sounds.TOGGLE);
	}
	,resize: function(size) {
		this.scale.x = this.scale.y = 1;
		this.logo.scale.x = this.logo.scale.y = Math.min((size.width - 50) / this.origsize.width,(size.height - 50) / this.origsize.height);
		this.logo.y = size.height - this.logo.height;
		this.logo.x = Math.round((size.width - this.logo.width) / 2);
		this.help.resize(size);
	}
	,hide: function() {
		createjs.Tween.get(this.logo).to({ alpha : 0},450);
		createjs.Tween.get(this.start).to({ alpha : 0},450);
		createjs.Tween.get(this.help).to({ alpha : 0},450);
	}
	,show: function() {
		createjs.Tween.get(this.logo).to({ alpha : 1},500);
		createjs.Tween.get(this.start).to({ alpha : 1},500);
		createjs.Tween.get(this.help).to({ alpha : 1},500);
	}
	,__class__: controls_StartView
});
var controls_TargetIndicator = function(left) {
	this.left = false;
	PIXI.Container.call(this);
	this.left = left;
	this.initializeControls();
};
controls_TargetIndicator.__name__ = true;
controls_TargetIndicator.__super__ = PIXI.Container;
controls_TargetIndicator.prototype = $extend(PIXI.Container.prototype,{
	initializeControls: function() {
		this.cOxygen = new controls_Collectable(controls_CType.oxygen);
		this.cLithium = new controls_Collectable(controls_CType.lithium);
		this.cAluminium = new controls_Collectable(controls_CType.aluminium);
		this.cBrohm = new controls_Collectable(controls_CType.brohm);
		this.cMagnesium = new controls_Collectable(controls_CType.magnesium);
		this.addChild(this.cOxygen);
		this.addChild(this.cLithium);
		this.addChild(this.cBrohm);
		this.addChild(this.cMagnesium);
		this.addChild(this.cAluminium);
		this.cOxygen.scale.x = this.cOxygen.scale.y = 0.25;
		this.cLithium.scale.x = this.cLithium.scale.y = 0.25;
		this.cBrohm.scale.x = this.cBrohm.scale.y = 0.25;
		this.cMagnesium.scale.x = this.cMagnesium.scale.y = 0.25;
		this.cAluminium.scale.x = this.cAluminium.scale.y = 0.25;
		this.cOxygen.x = 50;
		this.cOxygen.y = 50;
		this.cLithium.x = 50;
		this.cLithium.y = 50;
		this.cBrohm.x = 50;
		this.cBrohm.y = 50;
		this.cMagnesium.x = 50;
		this.cMagnesium.y = 50;
		this.cAluminium.x = 50;
		this.cAluminium.y = 50;
		var ts = { };
		ts.fontFamily = "pigment_demoregular";
		this.count = new PIXI.Text("7",ts);
		this.addChild(this.count);
		this.pivot.y = -50;
		this.pivot.x = this.left?100:-100;
		this.count.alpha = 0;
	}
	,setType: function(type) {
		this.type = type;
		this.cOxygen.visible = type == controls_CType.oxygen;
		this.cLithium.visible = type == controls_CType.lithium;
		this.cBrohm.visible = type == controls_CType.brohm;
		this.cMagnesium.visible = type == controls_CType.magnesium;
		this.cAluminium.visible = type == controls_CType.aluminium;
	}
	,setcount: function(val) {
		this.count.text = val == null?"null":"" + val;
	}
	,start: function() {
		createjs.Tween.get(this.pivot).wait(450,true).to({ x : 0},450,createjs.Ease.getBackOut(1.3));
		createjs.Tween.get(this.count).wait(900,true).to({ alpha : 1},450);
	}
	,hide: function() {
		var tmp = this.left?100:-100;
		createjs.Tween.get(this.pivot).to({ x : tmp},450,createjs.Ease.backIn);
		createjs.Tween.get(this.count).to({ alpha : 0},450);
	}
	,__class__: controls_TargetIndicator
});
var controls_UI = function() {
	PIXI.Container.call(this);
	this.initializeControls();
};
controls_UI.__name__ = true;
controls_UI.__super__ = PIXI.Container;
controls_UI.prototype = $extend(PIXI.Container.prototype,{
	initializeControls: function() {
		this.target1 = new controls_TargetIndicator(true);
		this.target2 = new controls_TargetIndicator(false);
		this.charge = new controls_Charge();
		this.target1.count.x = 44;
		this.target2.count.x = 44;
		this.target1.count.y = 80;
		this.target2.count.y = 80;
		this.addChild(this.charge);
		this.addChild(this.target1);
		this.addChild(this.target2);
		this.former = new controls_PairFormer();
		this.addChild(this.former);
		this.finalreactionlabel = util_Asset.getImage("label.png",true);
		this.reactionlabel = util_Asset.getImage("label.png",true);
		this.finalReactionC = new PIXI.Container();
		this.reactionC = new PIXI.Container();
		this.finalReactionC.addChild(this.finalreactionlabel);
		this.reactionC.addChild(this.reactionlabel);
		this.reactionlabel.y = -70;
		this.finalreactionlabel.y = -70;
		this.addChild(this.reactionC);
		this.addChild(this.finalReactionC);
		this.finalReaction = util_Asset.getImage("alumiinibromidin_reaktio.png",true);
		this.reaction = util_Asset.getImage("alumiinibromidin_reaktio.png",true);
		this.reactionC.addChild(this.reaction);
		this.finalReactionC.addChild(this.finalReaction);
		this.reactionC.pivot.y = 100;
		this.finalReactionC.pivot.y = 100;
		this.endUI = new controls_EndUi();
		this.addChild(this.endUI);
		this.endUI.visible = false;
	}
	,resize: function(size) {
		this.size = size;
		this.target2.x = size.width - 100;
		this.reaction.width = size.width - 100;
		this.reaction.height = 50;
		this.reaction.scale.x = this.reaction.scale.y = Math.min(1,Math.min(this.reaction.scale.y,this.reaction.scale.x));
		this.reactionlabel.width = this.reaction.width * 2;
		this.reaction.x = (this.reactionlabel.width - this.reaction.width) / 2;
		this.reactionC.x = Math.round((size.width - this.reactionC.width) / 2);
		this.finalReaction.width = size.width - 100;
		this.finalReaction.height = 50;
		this.finalReaction.scale.x = this.finalReaction.scale.y = Math.min(1,Math.min(this.finalReaction.scale.y,this.finalReaction.scale.x));
		this.finalreactionlabel.width = this.finalReaction.width * 2;
		this.finalReaction.x = (this.finalreactionlabel.width - this.finalReaction.width) / 2;
		this.finalReactionC.x = Math.round((size.width - this.finalReactionC.width) / 2);
		this.charge.resize(size);
		this.former.resize(size);
		this.endUI.resize(size);
	}
	,start: function(reaction,finalReaction) {
		this.target1.start();
		this.target2.start();
		this.reaction.texture = util_Asset.getTexture(reaction,true);
		this.finalReaction.texture = util_Asset.getTexture(finalReaction,true);
		this.resize(this.size);
		createjs.Tween.get(this.reactionC.pivot).to({ y : 0},450,createjs.Ease.getBackOut(0.3));
		this.charge.show();
		createjs.Tween.get(this.finalReactionC.pivot).to({ y : 100},450,createjs.Ease.getBackOut(0.3));
	}
	,hide: function() {
		this.target1.hide();
		this.target2.hide();
		this.charge.hide();
		createjs.Tween.get(this.reactionC.pivot).to({ y : 100},450,createjs.Ease.backIn);
		createjs.Tween.get(this.finalReactionC.pivot).to({ y : 0},450,createjs.Ease.backIn);
		this.endUI.show(Main.instance.game.rating);
	}
	,backToSelect: function() {
		createjs.Tween.get(this.finalReactionC.pivot).to({ y : 100},450,createjs.Ease.getBackOut(0.3));
		this.endUI.hide();
	}
	,updatePairAmount: function(pairsNeeded) {
		this.charge.count.text = Std.string(Math.max(0,pairsNeeded));
		if(pairsNeeded > 0) {
			haxe_Timer.delay(($_=this.charge,$bind($_,$_.shake)),2500);
		}
	}
	,formPair: function(items,pairsNeeded) {
		console.log("Foorm pari");
		this.charge.count.text = Std.string(Math.max(0,pairsNeeded));
		if(pairsNeeded > 0) {
			haxe_Timer.delay(($_=this.charge,$bind($_,$_.shake)),2500);
		}
		this.former.formPairs(items,this.target1.type,this.target2.type);
	}
	,__class__: controls_UI
});
var filters_bg_BgFilter = function() {
	this.time = 0;
	var tex = util_Asset.getTexture("noise.jpg",false);
	tex.baseTexture.mipmap = false;
	tex.baseTexture.wrapMode = PIXI.WRAP_MODES.REPEAT;
	var frag = haxe_Resource.getString("bg.frag");
	PIXI.Filter.call(this,null,frag,this.uniforms);
	this.uniforms.noise = tex;
	this.padding = 0;
};
filters_bg_BgFilter.__name__ = true;
filters_bg_BgFilter.__super__ = PIXI.Filter;
filters_bg_BgFilter.prototype = $extend(PIXI.Filter.prototype,{
	resize: function(size) {
		this.uniforms.aspect = size.height / size.width;
	}
	,apply: function(filterManager,input,output,clear) {
		this.time += 0.0038461538461538464;
		if(this.time > 100) {
			this.time = 0;
		}
		this.uniforms.time = this.time;
		this.uniforms.off = [-Main.instance.game.charpos.x / 2000,-Main.instance.game.charpos.y / 2000];
		PIXI.Filter.prototype.apply.call(this,filterManager,input,output,clear);
	}
	,wrong: function() {
		this.uniforms.flash += 2;
		createjs.Tween.removeTweens(this.uniforms);
		createjs.Tween.get(this.uniforms).to({ flash : 0},1050,createjs.Ease.quadIn);
	}
	,__class__: filters_bg_BgFilter
});
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_Resource = function() { };
haxe_Resource.__name__ = true;
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return x.str;
			}
			return haxe_crypto_Base64.decode(x.data).toString();
		}
	}
	return null;
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				s += fcc((c & 31) << 12 | (b[i++] & 127) << 6 | b[i++] & 127);
			} else {
				var u = (c & 15) << 18 | (b[i++] & 127) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
haxe_crypto_Base64.__name__ = true;
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		switch(bytes.length % 3) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
haxe_crypto_BaseCode.__name__ = true;
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0?0:1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask] & 255;
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask] & 255;
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) tbl[_g++] = -1;
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i = _g1++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255 & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_BalancedTree = function() {
};
haxe_ds_BalancedTree.__name__ = true;
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null?0:node._height);
		} else if(c < 0) {
			return this.balance(this.setLoop(k,v,node.left),node.key,node.value,node.right);
		} else {
			return this.balance(node.left,node.key,node.value,this.setLoop(k,v,node.right));
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null?0:l._height;
		var hr = r == null?0:r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var tmp = _this == null?0:_this._height;
			var _this1 = l.right;
			if(tmp >= (_this1 == null?0:_this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this2 = r.right;
			var tmp1 = _this2 == null?0:_this2._height;
			var _this3 = r.left;
			if(tmp1 > (_this3 == null?0:_this3._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr?hl:hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var tmp1 = _this == null?0:_this._height;
		var _this1 = this.right;
		if(tmp1 > (_this1 == null?0:_this1._height)) {
			var _this2 = this.left;
			if(_this2 == null) {
				tmp = 0;
			} else {
				tmp = _this2._height;
			}
		} else {
			var _this3 = this.right;
			if(_this3 == null) {
				tmp = 0;
			} else {
				tmp = _this3._height;
			}
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
haxe_ds_TreeNode.__name__ = true;
haxe_ds_TreeNode.prototype = {
	__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
haxe_ds_EnumValueMap.__name__ = true;
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1[1] - k2[1];
		if(d != 0) {
			return d;
		}
		var p1 = k1.slice(2);
		var p2 = k2.slice(2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g1 = 0;
		var _g = a1.length;
		while(_g1 < _g) {
			var i = _g1++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if((v1 instanceof Array) && v1.__enum__ == null && ((v2 instanceof Array) && v2.__enum__ == null)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Error = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
haxe_io_FPHelper.__name__ = true;
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0?-f:f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	return (f < 0?-2147483648:0) | exp + 127 << 23 | Math.round((af / Math.pow(2,exp) - 1) * 8388608) & 8388607;
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = intf[_g1++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class && o.__name__ != null) {
			return true;
		}
		if(cl == Enum && o.__ename__ != null) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) this.a[_g1++] = 0;
		this.byteLength = len;
	}
};
js_html_compat_ArrayBuffer.__name__ = true;
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null?null:end - begin);
	var result = new ArrayBuffer(u.byteLength);
	new Uint8Array(result).set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_Float32Array = function() { };
js_html_compat_Float32Array.__name__ = true;
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Uint8Array = function() { };
js_html_compat_Uint8Array.__name__ = true;
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var js_three__$ArrayLike_ArrayLike_$Impl_$ = {};
js_three__$ArrayLike_ArrayLike_$Impl_$.__name__ = true;
js_three__$ArrayLike_ArrayLike_$Impl_$.get = function(this1,key) {
	return this1[key];
};
js_three__$ArrayLike_ArrayLike_$Impl_$.arrayWrite = function(this1,k,v) {
	this1[k] = v;
	return v;
};
var particles_BaseParticleEffect = function() {
	this.complete = true;
	PIXI.Container.call(this);
};
particles_BaseParticleEffect.__name__ = true;
particles_BaseParticleEffect.__super__ = PIXI.Container;
particles_BaseParticleEffect.prototype = $extend(PIXI.Container.prototype,{
	update: function(d) {
	}
	,clear: function() {
	}
	,__class__: particles_BaseParticleEffect
});
var particles_BgStars = function() {
	this.area = new PIXI.Rectangle(0,0,2048,2048);
	var _gthis = this;
	particles_BaseParticleEffect.call(this);
	this.pool = new util_Pool(50,function() {
		var p = { sprite : util_Asset.getImage("UI_little circle.png",true), lifetime : 0, maxlife : 0, sx : 0, sy : 0};
		_gthis.addChild(p.sprite);
		p.sprite.scale.x = p.sprite.scale.y = 0.1;
		p.sprite.anchor.x = p.sprite.anchor.y = 0.5 + Math.random();
		p.sprite.blendMode = PIXI.BLEND_MODES.ADD;
		_gthis.randomizeParticle(p);
		return p;
	});
	Main.instance.tickListeners.push($bind(this,this.update));
};
particles_BgStars.__name__ = true;
particles_BgStars.__super__ = particles_BaseParticleEffect;
particles_BgStars.prototype = $extend(particles_BaseParticleEffect.prototype,{
	randomizeParticle: function(p) {
		p.sprite.scale.x = p.sprite.scale.y = Math.random() * 0.06 + 0.025;
		p.lifetime = (Math.random() + 0.5) * 80 + 30;
		p.maxlife = p.lifetime;
		p.sprite.x = Math.random() * this.area.width + this.area.x;
		p.sprite.y = Math.random() * this.area.height + this.area.y;
		p.sx = (Math.random() - 0.5) * 2;
		p.sy = (Math.random() - 1.5) * 2;
	}
	,update: function(d) {
		particles_BaseParticleEffect.prototype.update.call(this,d);
		var _g = 0;
		var _g1 = this.pool.get_all();
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.lifetime -= d;
			if(p.lifetime < 0) {
				this.randomizeParticle(p);
			}
			p.sprite.x += p.sx * d;
			p.sprite.y += p.sy * d;
			p.sprite.rotation = (p.lifetime + p.maxlife) * p.sprite.scale.x * 0.1;
			var phase = (p.maxlife - p.lifetime) / p.maxlife;
			p.sprite.alpha = (phase < 0.34?phase / 0.34:1 - (phase - 0.34) / 0.65999999999999992) * 0.5;
		}
	}
	,clear: function() {
		particles_BaseParticleEffect.prototype.clear.call(this);
	}
	,__class__: particles_BgStars
});
var particles_BgWords = function() {
	this.area = new PIXI.Rectangle(0,0,2048,2048);
	var _gthis = this;
	particles_BaseParticleEffect.call(this);
	var pos = ["alumiini.png","alumiinibromidi.png","alumiinioksidi.png","bromidi.png","litium.png","litiumbromidi.png","litiumoksidi.png","magnesium.png","magnesiumbromidi.png","magnesiumoksidi.png","oksidi.png"];
	var c = 0;
	this.pool = new util_Pool(150,function() {
		var p = { sprite : util_Asset.getImage(pos[c % pos.length],true), lifetime : 0, maxlife : 0, sx : 0, sy : 0};
		_gthis.addChild(p.sprite);
		p.sprite.scale.x = p.sprite.scale.y = 0.1;
		p.sprite.anchor.x = p.sprite.anchor.y = 0.5 + Math.random();
		_gthis.randomizeParticle(p);
		++c;
		return p;
	});
	Main.instance.tickListeners.push($bind(this,this.update));
};
particles_BgWords.__name__ = true;
particles_BgWords.__super__ = particles_BaseParticleEffect;
particles_BgWords.prototype = $extend(particles_BaseParticleEffect.prototype,{
	randomizeParticle: function(p) {
		p.sprite.scale.x = p.sprite.scale.y = Math.random() * 0.4 + 0.2;
		p.lifetime = (Math.random() + 0.5) * 160 + 80;
		p.maxlife = p.lifetime;
		p.sprite.x = Math.random() * this.area.width + this.area.x;
		p.sprite.y = Math.random() * this.area.height + this.area.y;
		p.sprite.rotation = (Math.random() - 0.5) * 0.25;
		p.sx = (Math.random() - 0.5) * 0.5;
		p.sy = (Math.random() - 1.5) * 0.5;
	}
	,update: function(d) {
		particles_BaseParticleEffect.prototype.update.call(this,d);
		var _g = 0;
		var _g1 = this.pool.get_all();
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.lifetime -= d;
			if(p.lifetime < 0) {
				this.randomizeParticle(p);
			}
			p.sprite.x += p.sx * d;
			p.sprite.y += p.sy * d;
			var phase = (p.maxlife - p.lifetime) / p.maxlife;
			p.sprite.alpha = (phase < 0.34?phase / 0.34:1 - (phase - 0.34) / 0.65999999999999992) * 0.5;
		}
	}
	,show: function() {
		createjs.Tween.get(this).to({ alpha : 1},500);
	}
	,hide: function() {
		createjs.Tween.get(this).to({ alpha : 0},500);
	}
	,clear: function() {
		particles_BaseParticleEffect.prototype.clear.call(this);
	}
	,__class__: particles_BgWords
});
var particles_ParticleManager = $hx_exports["ParticleManager"] = function() {
	throw new js__$Boot_HaxeError("Particle manager is static.");
};
particles_ParticleManager.__name__ = true;
particles_ParticleManager.init = function() {
	particles_ParticleManager.stars = new PIXI.Container();
	particles_ParticleManager.bgStars = new particles_BgStars();
	particles_ParticleManager.stars.addChild(particles_ParticleManager.bgStars);
	particles_ParticleManager.words = new particles_BgWords();
	particles_ParticleManager.stars.addChild(particles_ParticleManager.words);
};
particles_ParticleManager.rand = function(min,max) {
	return Math.floor(min + Math.random() * (max - min));
};
particles_ParticleManager.prototype = {
	__class__: particles_ParticleManager
};
var sounds_Sounds = $hx_exports["Sounds"] = function() { };
sounds_Sounds.__name__ = true;
sounds_Sounds.initSounds = function() {
	createjs.Sound.addEventListener("fileload",sounds_Sounds.soundLoadHandler);
	sounds_Sounds.loaded = [];
	sounds_Sounds.soundMap = new haxe_ds_StringMap();
	var base = "snd/";
	sounds_Sounds.sounds = [{ s : sounds_Sounds.BACKGROUND, c : 1},{ s : sounds_Sounds.BLOB_WRONG, c : 4},{ s : sounds_Sounds.BLOB_SUCK, c : 4},{ s : sounds_Sounds.BLOBS_COMBINE, c : 4},{ s : sounds_Sounds.BLOCK_BREAK, c : 4},{ s : sounds_Sounds.BLOCK_HIT, c : 4},{ s : sounds_Sounds.TOGGLE, c : 4},{ s : sounds_Sounds.ALU_BROMIDE, c : 1},{ s : sounds_Sounds.ALU_OXIDE, c : 1},{ s : sounds_Sounds.LITHIUM_BROMIDE, c : 1},{ s : sounds_Sounds.LITHIUM_OXIDE, c : 1},{ s : sounds_Sounds.MAG_BROMIDE, c : 1},{ s : sounds_Sounds.MAG_OXIDE, c : 1},{ s : sounds_Sounds.VICTORY, c : 1}];
	var _g = 0;
	var _g1 = sounds_Sounds.sounds;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		createjs.Sound.registerSound(base + Std.string(s.s) + ".mp3",s.s,s.c);
	}
	var iOS = new RegExp("iPad|iPhone|iPod").test(window.navigator.userAgent) && !window.MSStream;
	if(iOS) {
		sounds_Sounds.waitingForIOS = true;
		window.addEventListener("click",sounds_Sounds.handleInitClick,true);
		window.addEventListener("touchstart",sounds_Sounds.handleInitClick,true);
	}
	var hidden = null;
	var visibilityChange = null;
	if(window.document.hidden != null) {
		hidden = "hidden";
		visibilityChange = "visibilitychange";
	} else if(window.document.msHidden != null) {
		hidden = "msHidden";
		visibilityChange = "msvisibilitychange";
	} else if(window.document.webkitHidden != null) {
		hidden = "webkitHidden";
		visibilityChange = "webkitvisibilitychange";
	}
	window.document.addEventListener(visibilityChange,function() {
		if(Reflect.field(window.document,hidden)) {
			sounds_Sounds.stopSound(sounds_Sounds.BACKGROUND);
			createjs.Sound.setMute(true);
		} else {
			createjs.Sound.setMute(false);
			if(!createjs.Sound.getMute() && !sounds_Sounds.waitingForIOS) {
				sounds_Sounds.playEffect(sounds_Sounds.BACKGROUND,-1,1);
			}
		}
	});
	sounds_Sounds.initok = true;
	sounds_Sounds.totalSounds = 0;
	return true;
};
sounds_Sounds.soundLoadHandler = function(e) {
	sounds_Sounds.soundsLoaded++;
	if(sounds_Sounds.loadChange != null) {
		sounds_Sounds.loadChange(sounds_Sounds.soundsLoaded);
	}
	if(e.id != null) {
		sounds_Sounds.loaded.push(e.id);
	}
	if(e.id == sounds_Sounds.BACKGROUND && !createjs.Sound.getMute() && !sounds_Sounds.waitingForIOS && !sounds_Sounds.ingame) {
		sounds_Sounds.playEffect(sounds_Sounds.BACKGROUND,-1,sounds_Sounds.bg_volume);
	}
	if(sounds_Sounds.soundsLoaded == sounds_Sounds.totalSounds && sounds_Sounds.loadedHandler != null) {
		sounds_Sounds.loadedHandler();
	}
};
sounds_Sounds.handleInitClick = function(event) {
	sounds_Sounds.waitingForIOS = false;
	window.removeEventListener("touchstart",sounds_Sounds.handleInitClick,true);
	window.removeEventListener("click",sounds_Sounds.handleInitClick,true);
	if(!createjs.Sound.getMute()) {
		if(sounds_Sounds.loaded.indexOf(sounds_Sounds.BACKGROUND) >= 0) {
			sounds_Sounds.playEffect(sounds_Sounds.BACKGROUND,-1,sounds_Sounds.bg_volume);
		}
	}
};
sounds_Sounds.playEffect = function(name,loops,volume,delay) {
	if(!sounds_Sounds.soundRegistered(name)) {
		console.log("sound " + name + " not found");
	}
	if(!createjs.Sound.getMute() && sounds_Sounds.initok && sounds_Sounds.soundRegistered(name)) {
		if(volume == null) {
			volume = 1;
		}
		if(loops == null) {
			loops = 0;
		}
		if(delay == null) {
			delay = 0;
		}
		var _this = sounds_Sounds.soundMap;
		var value = createjs.Sound.play(name,{ delay : delay, interrupt : createjs.Sound.INTERRUPT_ANY, loop : loops, volume : volume});
		if(__map_reserved[name] != null) {
			_this.setReserved(name,value);
		} else {
			_this.h[name] = value;
		}
	}
	var _this1 = sounds_Sounds.soundMap;
	if(__map_reserved[name] != null) {
		return _this1.getReserved(name);
	} else {
		return _this1.h[name];
	}
};
sounds_Sounds.soundRegistered = function(name) {
	return Object.prototype.hasOwnProperty.call(createjs.Sound._idHash,name);
};
sounds_Sounds.stopSound = function(name) {
	var _this = sounds_Sounds.soundMap;
	if(__map_reserved[name] != null?_this.existsReserved(name):_this.h.hasOwnProperty(name)) {
		var _this1 = sounds_Sounds.soundMap;
		(__map_reserved[name] != null?_this1.getReserved(name):_this1.h[name]).stop();
	}
};
sounds_Sounds.getSound = function(name) {
	var _this = sounds_Sounds.soundMap;
	if(__map_reserved[name] != null) {
		return _this.getReserved(name);
	} else {
		return _this.h[name];
	}
};
sounds_Sounds.enableSounds = function() {
	if(createjs.Sound.getMute() && sounds_Sounds.initok) {
		createjs.Sound.setMute(false);
		sounds_Sounds.stopSound(sounds_Sounds.BACKGROUND);
		if(sounds_Sounds.loaded.indexOf(sounds_Sounds.BACKGROUND) >= 0) {
			sounds_Sounds.playEffect(sounds_Sounds.BACKGROUND,-1,sounds_Sounds.bg_volume);
		}
	}
};
sounds_Sounds.disableSounds = function() {
	createjs.Sound.setMute(true);
};
var util_Asset = $hx_exports["util"]["Asset"] = function() {
	throw new js__$Boot_HaxeError("Asset is static only.");
};
util_Asset.__name__ = true;
util_Asset.init = function(loader) {
	util_Asset._loader = loader;
};
util_Asset.getResource = function(name) {
	if(!Object.prototype.hasOwnProperty.call(util_Asset._loader.resources,name)) {
		console.log("Resource " + name + " not found!");
	}
	return Reflect.field(util_Asset._loader.resources,name);
};
util_Asset.getRawImage = function(name) {
	return util_Asset.getResource(name).data;
};
util_Asset.getTexture = function(name,fromSheet) {
	if(!fromSheet) {
		name = "img/" + name;
	}
	var tex = null;
	try {
		tex = PIXI.Texture.fromFrame(name);
	} catch( e ) {
		tex = PIXI.Texture.fromImage(name);
	}
	if(tex == null) {
		console.log("Warning: Asset " + name + " not found.");
	}
	if(tex != null && util_Asset._prepared.indexOf(tex.baseTexture) == -1) {
		util_Asset._prepared.push(tex.baseTexture);
		Main.instance.renderer.plugins.prepare.upload(tex.baseTexture);
	}
	return tex;
};
util_Asset.getImage = function(name,fromSheet) {
	if(!fromSheet) {
		name = "img/" + name;
	}
	var sprite = null;
	try {
		sprite = PIXI.Sprite.fromFrame(name);
	} catch( e ) {
		new PIXI.Sprite(PIXI.Texture.fromImage(name));
	}
	if(sprite == null) {
		console.log("Warning: Asset " + name + " not found.");
	}
	if(sprite != null && util_Asset._prepared.indexOf(sprite.texture.baseTexture) == -1) {
		util_Asset._prepared.push(sprite.texture.baseTexture);
		Main.instance.renderer.plugins.prepare.upload(sprite.texture.baseTexture);
	}
	return sprite;
};
util_Asset.getTexturesAndAnimations = function(json,id) {
	var tex = [];
	var anim = { };
	var ret = { textures : tex, animations : anim};
	var count = 0;
	var _g = 0;
	var _g1 = Reflect.fields(json.frames);
	while(_g < _g1.length) {
		var frame = _g1[_g];
		++_g;
		var split = frame.split("/");
		if(split[0] != id) {
			continue;
		}
		var animName = split[1];
		var texture = PIXI.Texture.fromFrame(frame);
		tex.push(texture);
		if(texture != null && util_Asset._prepared.indexOf(texture.baseTexture) == -1) {
			util_Asset._prepared.push(texture.baseTexture);
			Main.instance.renderer.plugins.prepare.upload(texture.baseTexture);
		}
		if(Object.prototype.hasOwnProperty.call(anim,animName)) {
			Reflect.field(anim,animName)[1] = count;
		} else {
			anim[animName] = [count,count];
		}
		++count;
	}
	return ret;
};
util_Asset.getTextures = function(json,id) {
	var tex = [];
	var _g = 0;
	var _g1 = Reflect.fields(json.frames);
	while(_g < _g1.length) {
		var frame = _g1[_g];
		++_g;
		if(id.match(frame)) {
			var texture = PIXI.Texture.fromFrame(frame);
			tex.push(texture);
			if(util_Asset._prepared.indexOf(texture.baseTexture) == -1) {
				util_Asset._prepared.push(texture.baseTexture);
				Main.instance.renderer.plugins.prepare.upload(texture.baseTexture);
			}
		}
	}
	return tex;
};
util_Asset.prototype = {
	__class__: util_Asset
};
var util_BrowserDetect = function() {
};
util_BrowserDetect.__name__ = true;
util_BrowserDetect.init = function() {
	util_BrowserDetect.browser = util_BrowserDetect.searchString(util_BrowserDetect.dataBrowser);
	var versionUserAgentResult = Std.string(util_BrowserDetect.searchVersion(window.navigator.userAgent));
	if(versionUserAgentResult == null) {
		var versionAppResult = Std.string(util_BrowserDetect.searchVersion(window.navigator.appVersion));
		if(versionAppResult == null) {
			util_BrowserDetect.version = "An unkonwn version";
		} else {
			util_BrowserDetect.version = versionAppResult;
		}
	} else {
		util_BrowserDetect.version = versionUserAgentResult;
	}
	var dataOsFind = util_BrowserDetect.searchString(util_BrowserDetect.dataOS);
	util_BrowserDetect.OS = dataOsFind == null?"an unkonwn OS":dataOsFind;
};
util_BrowserDetect.searchString = function(data) {
	var _g1 = 0;
	var _g = data.length;
	while(_g1 < _g) {
		var i = _g1++;
		var dataString = data[i].string;
		var dataProp = data[i].prop;
		var versionResult = data[i].versionSearch;
		util_BrowserDetect.versionSearchString = versionResult == null?data[i].identity:versionResult;
		if(dataString != null) {
			if(dataString.indexOf(data[i].subString) != -1) {
				return data[i].identity;
			}
		} else if(dataProp != null) {
			return data[i].identity;
		}
	}
	return null;
};
util_BrowserDetect.searchVersion = function(dataString) {
	var index = dataString.indexOf(util_BrowserDetect.versionSearchString);
	if(index == -1) {
		return null;
	}
	var x = dataString.substring(index + util_BrowserDetect.versionSearchString.length + 1);
	return parseFloat(x);
};
util_BrowserDetect.getAndroidVersion = function() {
	var ua = window.navigator.userAgent.toLowerCase();
	var reg = new EReg("android\\s([0-9\\.]*)","");
	if(reg.match(ua)) {
		return reg.matched(1);
	} else {
		return "0";
	}
};
util_BrowserDetect.prototype = {
	__class__: util_BrowserDetect
};
var util_LoaderWrapper = $hx_exports["LW"] = function() {
	throw new js__$Boot_HaxeError("LoaderWrapper is static only.");
};
util_LoaderWrapper.__name__ = true;
util_LoaderWrapper.beforeSheetLoad = function() {
	return function(r,next) {
		if(r.name.indexOf("json_image") >= 0 && r.url.indexOf("?") == -1) {
			r.url += "?_=" + haxe_crypto_Base64.encode(haxe_io_Bytes.ofString(Config.VERSION));
		}
		next();
	};
};
util_LoaderWrapper.LOAD_ASSETS = function(assets,onComplete) {
	util_LoaderWrapper.onComplete = onComplete;
	util_LoaderWrapper.complete = false;
	if(util_LoaderWrapper.loader == null) {
		util_LoaderWrapper.loader = new PIXI.loaders.Loader();
		util_LoaderWrapper.loader.before(util_LoaderWrapper.beforeSheetLoad());
		util_Asset.init(util_LoaderWrapper.loader);
	}
	util_LoaderWrapper.totalCount = 0;
	util_LoaderWrapper.batches = [];
	var _g1 = 0;
	var _g = assets.length;
	while(_g1 < _g) {
		var i = _g1++;
		var batchNumber = Math.floor(i / 1);
		if(util_LoaderWrapper.batches[batchNumber] == null) {
			util_LoaderWrapper.batches[batchNumber] = [];
		}
		var name = assets[i];
		util_LoaderWrapper.batches[batchNumber].push(name);
		if(batchNumber == 0) {
			util_LoaderWrapper.addLoad(name);
		}
		if(name.indexOf("img") >= 0 && HxOverrides.substr(name,name.length - 4,4) == "json") {
			util_LoaderWrapper.totalCount += 2;
		} else if(name.indexOf(".fnt") >= 0) {
			util_LoaderWrapper.totalCount += 2;
		} else {
			util_LoaderWrapper.totalCount++;
		}
	}
	util_LoaderWrapper.batches.shift();
	util_LoaderWrapper.loadCount = 0;
	util_LoaderWrapper.updateText();
	util_LoaderWrapper.loader.addListener("progress",function(e) {
		util_LoaderWrapper.loadCount++;
		util_LoaderWrapper.updateText();
	});
	util_LoaderWrapper.loader.addListener("complete",function(e1) {
		if(util_LoaderWrapper.batches.length == 0) {
			util_LoaderWrapper.imagesComplete = true;
			util_LoaderWrapper.assetLoaded();
		} else {
			var batch = util_LoaderWrapper.batches.shift();
			var _g2 = 0;
			while(_g2 < batch.length) {
				var name1 = batch[_g2];
				++_g2;
				util_LoaderWrapper.addLoad(name1);
			}
			util_LoaderWrapper.loader.load();
		}
	});
	util_LoaderWrapper.loader.load();
};
util_LoaderWrapper.addLoad = function(name) {
	var n = name;
	var index = name.indexOf("@");
	if(index >= 0) {
		n = HxOverrides.substr(name,0,index) + HxOverrides.substr(name,name.lastIndexOf("."),null);
	}
	util_LoaderWrapper.loader.add(n,name + "?_=" + haxe_crypto_Base64.encode(haxe_io_Bytes.ofString(Config.VERSION)));
};
util_LoaderWrapper.assetLoaded = function() {
	if(util_LoaderWrapper.imagesComplete && !util_LoaderWrapper.complete) {
		util_LoaderWrapper.complete = true;
		util_LoaderWrapper.onComplete();
	}
};
util_LoaderWrapper.updateText = function() {
	var other = Math.floor(util_LoaderWrapper.loadCount / util_LoaderWrapper.totalCount) * 100;
	window.document.getElementById("preload").innerHTML = "Loading: " + Math.min(other,other) + "%";
};
util_LoaderWrapper.handleSound = function() {
	sounds_Sounds.loadChange = util_LoaderWrapper.updateSoundText;
};
util_LoaderWrapper.updateSoundText = function(amount) {
	util_LoaderWrapper.updateText();
};
util_LoaderWrapper.prototype = {
	__class__: util_LoaderWrapper
};
var util_MathUtil = function() {
};
util_MathUtil.__name__ = true;
util_MathUtil.findLineIntersection = function(p1,p2,p3,p4) {
	var x12 = p1.x - p2.x;
	var x34 = p3.x - p4.x;
	var y12 = p1.y - p2.y;
	var y34 = p3.y - p4.y;
	var c = x12 * y34 - y12 * x34;
	if(Math.abs(c) < 0.01) {
		return null;
	} else {
		var a = p1.x * p2.y - p1.y * p2.x;
		var b = p3.x * p4.y - p3.y * p4.x;
		return new PIXI.Point((a * x34 - b * x12) / c,(a * y34 - b * y12) / c);
	}
};
util_MathUtil.normalize = function(point) {
	var np = new PIXI.Point(point.x,point.y);
	var l = Math.sqrt(np.x * np.x + np.y * np.y);
	if(l == 0) {
		l = 1;
	}
	np.x /= l;
	np.y /= l;
	return np;
};
util_MathUtil.pointLength = function(point) {
	return Math.sqrt(point.x * point.x + point.y * point.y);
};
util_MathUtil.calculateArea = function(polygon) {
	var sum = 0;
	var _g1 = 0;
	var _g = polygon.length;
	while(_g1 < _g) {
		var i = _g1++;
		sum += polygon[i].x * polygon[(i + 1) % polygon.length].y - polygon[i].y * polygon[(i + 1) % polygon.length].x;
	}
	return Math.abs(sum / 2);
};
util_MathUtil.clipInput = function(k,arr) {
	if(k < 0) {
		k = 0;
	}
	if(k > arr.length - 1) {
		k = arr.length - 1;
	}
	return arr[k];
};
util_MathUtil.getTangent = function(k,factor,array) {
	return factor * (util_MathUtil.clipInput(k + 1,array) - util_MathUtil.clipInput(k - 1,array)) / 2;
};
util_MathUtil.cubicInterpolation = function(array,t,tangentFactor) {
	if(tangentFactor == null) {
		tangentFactor = 1;
	}
	var k = Math.floor(t);
	var m_0 = util_MathUtil.getTangent(k,tangentFactor,array);
	var m_1 = util_MathUtil.getTangent(k + 1,tangentFactor,array);
	var p_0 = util_MathUtil.clipInput(k,array);
	var p_1 = util_MathUtil.clipInput(k + 1,array);
	t -= k;
	var t2 = t * t;
	var t3 = t * t2;
	return (2 * t3 - 3 * t2 + 1) * p_0 + (t3 - 2 * t2 + t) * m_0 + (-2 * t3 + 3 * t2) * p_1 + (t3 - t2) * m_1;
};
util_MathUtil.shuffle = function(array,key) {
	var index;
	var result = [];
	var copy = array.slice(0);
	while(copy.length > 0) {
		if(!isNaN(key)) {
			index = key % copy.length;
		} else {
			index = Math.floor(Math.random() * copy.length);
		}
		result.push(copy[index]);
		copy.splice(index,1);
	}
	return result;
};
util_MathUtil.prototype = {
	__class__: util_MathUtil
};
var util_Pool = $hx_exports["util"]["Pool"] = function(size,constructor) {
	this._pool = new Array(size);
	this._index = 0;
	if(constructor != null) {
		var _g1 = 0;
		var _g = size;
		while(_g1 < _g) this._pool[_g1++] = constructor();
	}
};
util_Pool.__name__ = true;
util_Pool.prototype = {
	get_all: function() {
		return this._pool;
	}
	,addItem: function(item) {
		this._pool[this._index] = item;
		this._index = (this._index + 1) % this._pool.length;
	}
	,getNext: function() {
		this._index = (this._index + 1) % this._pool.length;
		return this._pool[this._index];
	}
	,__class__: util_Pool
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
haxe_Resource.content = [{ name : "bg.frag", data : "cHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7DQoNCnZhcnlpbmcgbWVkaXVtcCB2ZWMyIHZUZXh0dXJlQ29vcmQ7DQoNCnVuaWZvcm0gc2FtcGxlcjJEIHVTYW1wbGVyOw0KdW5pZm9ybSBzYW1wbGVyMkQgbm9pc2U7DQoNCnVuaWZvcm0gZmxvYXQgdGltZTsNCnVuaWZvcm0gdmVjNCBmaWx0ZXJDbGFtcDsNCg0KdW5pZm9ybSBmbG9hdCBhc3BlY3Q7DQoNCnVuaWZvcm0gdmVjMiBvZmY7DQp1bmlmb3JtIGZsb2F0IGZsYXNoOw0KDQp2b2lkIG1haW4oICApDQp7DQoJLy8gTm9ybWFsaXplZCBwaXhlbCBjb29yZGluYXRlcyAoZnJvbSAwIHRvIDEpDQogICAgdmVjMiB1diA9IHZUZXh0dXJlQ29vcmQ7DQoJdmVjMiBudXYgPSB2VGV4dHVyZUNvb3JkKjMuMDsNCgkNCiAgICBmbG9hdCBuID0gdGV4dHVyZTJEKG5vaXNlLCBudXYrdmVjMihzaW4odGltZSouMyksdGltZSkqLjAyLW9mZiouNCkuci0uNTsNCiAgICBmbG9hdCBuMiA9IHRleHR1cmUyRChub2lzZSx2ZWMyKC4yKSsgbnV2K3ZlYzIoc2luKHRpbWUqLjUpLHRpbWUpKi4wNC1vZmYqLjgpLnItLjU7DQogICAgbis9bjI7DQogICAgDQoJbnV2LnkqPWFzcGVjdDsNCiAgICB1di54Kz1uLzI1MC47DQogICAgdXYueSs9bi8yNTAuOw0KICAgIA0KICAgIGZsb2F0IGQgPSBsZW5ndGgodXYtdmVjMigwLjUpKTsNCiAgICBkPXNtb290aHN0ZXAoMC4xLDAuNiwxLi1kKTsNCgl2ZWM0IGJhc2UgPSB0ZXh0dXJlMkQodVNhbXBsZXIsIHV2KSpkOw0KCQ0KICAgIC8vIE91dHB1dCB0byBzY3JlZW4NCiAgICB2ZWM0IGNvbCA9IHZlYzQoIHNpbih1di54K3RpbWUpLCBjb3ModXYueSt0aW1lKSwgdXYueCwxLik7DQogICAgDQoJZ2xfRnJhZ0NvbG9yID0gYmFzZStzbW9vdGhzdGVwKC0xLiwgMS4sIG4pKmNvbCouMSArIHZlYzQoMi4sIDAuLDAuLDEuKSpmbGFzaCpzbW9vdGhzdGVwKC0wLjEsMS41LDEuLWQpOw0KCS8vZ2xfRnJhZ0NvbG9yID12ZWM0KG4sbixuLDEuKTsvLw0KfQ0K"}];
var __map_reserved = {}
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
Config.ASSETS = ["img/black.png","img/bg.jpg","img/noise.jpg","img/jars.json","img/ui.json","img/oxygen.json","img/brohm.json","img/lithium.json","img/aluminium.json","img/magnesium.json","img/alu_bromide.json","img/alu_oxide.json","img/lithium_bromide.json","img/lithium_oxide.json","img/mag_bromide.json","img/mag_oxide.json"];
Config.VERSION = "chemistry fall 0.1";
Config.GRAVITY = 0.1;
controls_AnimationController.ON_COMPLETE = "onComplete";
controls_AnimationController.ON_CHANGE = "onChange";
controls_Block.blockType = 0;
controls_DeviceOrientationControl.lon = 0;
controls_DeviceOrientationControl.lat = 0;
controls_DeviceOrientationControl.absolute = true;
controls_DeviceOrientationControl.beta = 0;
controls_DeviceOrientationControl.alpha = 0;
controls_DeviceOrientationControl.gamma = 0;
controls_DeviceOrientationControl.deviceOrientation = { };
controls_DeviceOrientationControl.screenOrientation = 0;
controls_DeviceOrientationControl.alphaOffset = 0;
controls_Jar.textures = [];
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
js_Boot.__toStr = { }.toString;
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
sounds_Sounds.BLOB_SUCK = "blob_suck";
sounds_Sounds.BLOB_WRONG = "blob_wrong";
sounds_Sounds.BLOBS_COMBINE = "blobs_combine";
sounds_Sounds.BLOCK_BREAK = "block_break";
sounds_Sounds.BLOCK_HIT = "block_hit";
sounds_Sounds.TOGGLE = "toggle";
sounds_Sounds.ALU_BROMIDE = "alu_bromide";
sounds_Sounds.ALU_OXIDE = "alu_oxide";
sounds_Sounds.LITHIUM_BROMIDE = "lithium_bromide";
sounds_Sounds.LITHIUM_OXIDE = "lithium_oxide";
sounds_Sounds.MAG_BROMIDE = "mag_bromide";
sounds_Sounds.MAG_OXIDE = "mag_oxide";
sounds_Sounds.VICTORY = "victory";
sounds_Sounds.BACKGROUND = "Ion_in_A_Jar_01";
sounds_Sounds.bg_volume = 1;
sounds_Sounds.totalSounds = 0;
sounds_Sounds.initok = false;
sounds_Sounds.soundsLoaded = 0;
sounds_Sounds.waitingForIOS = false;
sounds_Sounds.ingame = false;
util_Asset._init = false;
util_Asset._prepared = [];
util_BrowserDetect.dataBrowser = [{ string : window.navigator.userAgent, subString : "Windows Phone 10.0", identity : "WindowsPhone10Edge"},{ string : window.navigator.userAgent, subString : "Chrome", identity : "Chrome"},{ string : window.navigator.userAgent, subString : "OmniWeb", versionSearch : "OmniWeb/", identity : "OmniWeb"},{ string : window.navigator.vendor, subString : "Apple", identity : "Safari", versionSearch : "Version"},{ string : window.navigator.vendor, subString : "iCab", identity : "iCab"},{ string : window.navigator.vendor, subString : "KDE", identity : "Konqueror"},{ string : window.navigator.userAgent, subString : "Firefox", identity : "Firefox"},{ string : window.navigator.vendor, subString : "Camino", identity : "Camino"},{ string : window.navigator.userAgent, subString : "Netscape", identity : "Netscape"},{ string : window.navigator.userAgent, subString : "MSIE", identity : "Explorer", versionSearch : "MSIE"},{ string : window.navigator.userAgent, subString : "Trident", identity : "Explorer11", versionSearch : "MSIE"},{ string : window.navigator.userAgent, subString : "Gecko", identity : "Mozilla", versionSearch : "rv"},{ string : window.navigator.userAgent, subString : "Mozilla", identity : "Netscape", versionSearch : "Mozilla"},{ prop : window.navigator.vendor, identity : "Opera", versionSearch : "Version"}];
util_BrowserDetect.dataOS = [{ string : window.navigator.platform, subString : "Win", identity : "Windows"},{ string : window.navigator.platform, subString : "Mac", identity : "Mac"},{ string : window.navigator.userAgent, subString : "iPhone", identity : "iPhone/iPod"},{ string : window.navigator.platform, subString : "Linux", identity : "Linux"}];
util_LoaderWrapper.complete = false;
util_LoaderWrapper.loadCount = 0;
util_LoaderWrapper.totalCount = 0;
util_LoaderWrapper.fontLoadStarted = false;
util_LoaderWrapper.imagesComplete = false;
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
